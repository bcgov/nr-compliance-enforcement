# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
#-- global variables, can be accessed by sub-charts.
global:
  #-- the registry where the images are stored. override during runtime for other registry at global level or individual level.
  repository: bcgov/nr-compliance-enforcement # provide the repo name from where images will be sourced for example bcgo
  #-- the registry where the images are stored. override during runtime for other registry at global level or individual level. default is ghcr.io
  registry: ghcr.io # ghcr.io for directly streaming from github container registry or "artifacts.developer.gov.bc.ca/github-docker-remote" for artifactory, or any other registry.
  #-- the tag of the image, it can be latest, 1.0.0 etc..., or the sha256 hash
  tag: ~
  #-- turn off autoscaling for the entire suite by setting this to false. default is true.
  autoscaling: false
  #-- global secrets, can be accessed by sub-charts.
  secrets:
    enabled: true
    databasePassword: ~
    databaseUser: ~
    databaseName: ~
    metabaseDatabaseUser: ~
    metabaseDatabaseName: ~
    metabaseDatabasePassword: ~
    persist: true
    bcGeocoderApiClientId: ~
    bcGeocoderApiKey: ~
    bcGeocoderApiUrl: ~
    comsJwtAuthUri: ~
    cdogsUri: ~
    cdogsClientId: ~
    cdogsClientSecret: ~
    cssUrl: ~
    cssTokenUrl: ~
    cssClientId: ~
    cssClientSecret: ~
    environment: ~
    webeocUsername: ~
    webeocPassword: ~
    webeocPosition: ~
    webeocIncident: ~
    webeocUrl: ~
    webeocCronExpression: ~
    webeocLogPath: ~
    backupDir: ~
    backupStrategy: ~
    numBackups: ~
    dailyBackups: ~
    weeklyBackups: ~
    monthlyBackups: ~
    databaseServiceName: ~
    objectstoreAccessKey: ~
    objectstoreUrl: ~
    objectstoreBackupDirectory: ~
    objectstoreKey: ~
    objectstoreBucket: ~
    objectstoreBucketName: ~
    objectstoreSecretKey: ~
    objectstoreApiUrl: ~
    jwksUri: ~
    jwtIssuer: ~
    keycloakClientId: ~
    caseManagementApiUrl: ~
    postgresqlEnableLogging: "false"
    flywayLocations:
      dev: "filesystem:/flyway/sql, filesystem:/flyway/sql-test"
      test: "filesystem:/flyway/sql, filesystem:/flyway/sql-test"
      prod: "filesystem:/flyway/sql"

  #-- domain of the application, it is required, apps.silver.devops.gov.bc.ca for silver cluster and apps.devops.gov.bc.ca for gold cluster
  domain: "apps.silver.devops.gov.bc.ca" # it is apps.gold.devops.gov.bc.ca for gold cluster
  #-- the database Alias gives a nice way to switch to different databases, crunchy, patroni ... etc.
  databaseAlias: bitnami-pg

#-- the components of the application, backend.
backend:
  #-- enable or disable backend
  enabled: true
  #-- the deployment strategy, can be "Recreate" or "RollingUpdate"
  deploymentStrategy: Recreate
  #-- autoscaling for the component. it is optional and is an object.
  autoscaling:
    #-- enable or disable autoscaling.
    enabled: true
    #-- the minimum number of replicas.
    minReplicas: 2
    #-- the maximum number of replicas.
    maxReplicas: 3
    #-- the target cpu utilization percentage, is from request cpu and NOT LIMIT CPU.
    targetCPUUtilizationPercentage: 80
  #-- vault, for injecting secrets from vault. it is optional and is an object. it creates an initContainer which reads from vault and app container can source those secrets. for referring to a working example with vault follow this link: https://github.com/bcgov/onroutebc/blob/main/charts/onroutebc/values.yaml#L171-L186
  vault:
    #-- enable or disable vault.
    enabled: false
    #-- the role of the vault. it is required, #licenseplate-prod or licenseplate-nonprod, license plate is the namespace without env
    role: ~
    #-- the vault path where the secrets live. it is required, dev/api-1, dev/api-2, test/api-1 etc...
    secretPaths:
      - dev/api-1
      - dev/api-2
      - test/api-1
      - test/api-2
      - prod/api-1
      - prod/api-2
    #-- resources specific to vault initContainer. it is optional and is an object.
    resources:
      limits:
        cpu: 50m
        memory: 50Mi
      requests:
        cpu: 50m
        memory: 25Mi
  #-- the service for the component. for inter namespace communication, use the service name as the hostname.
  service:
    #-- the type of the service. it can be ClusterIP, NodePort, LoadBalancer, ExternalName. ClusterIP is the default and is recommended.
    type: ClusterIP
    port: 80 # this is the service port, where it will be exposed internal to the namespace.
    targetPort: 3000 # this is container port where app listens on
  pdb:
    enabled: false # enable it in PRODUCTION for having pod disruption budget.
    minAvailable: 1 # the minimum number of pods that must be available during the disruption budget.

frontend:
  # -- enable or disable a component deployment.
  enabled: true
  # -- the deployment strategy, can be "Recreate" or "RollingUpdate"
  deploymentStrategy: Recreate

  #-- autoscaling for the component. it is optional and is an object.
  autoscaling:
    #-- enable or disable autoscaling.
    enabled: true
    #-- the minimum number of replicas.
    minReplicas: 2
    #-- the maximum number of replicas.
    maxReplicas: 3
    #-- the target cpu utilization percentage, is from request cpu and NOT LIMIT CPU.
    targetCPUUtilizationPercentage: 80
  #-- the service for the component. for inter namespace communication, use the service name as the hostname.
  service:
    #-- enable or disable the service.
    enabled: true
    #-- the type of the service. it can be ClusterIP, NodePort, LoadBalancer, ExternalName. ClusterIP is the default and is recommended.
    type: ClusterIP
    #-- the ports for the service.
    ports:
      - name: http
        #-- the port for the service. the service will be accessible on this port within the namespace.
        port: 80
        #-- the container port where the application is listening on
        targetPort: 3000
        #-- the protocol for the port. it can be TCP or UDP. TCP is the default and is recommended.
        protocol: TCP
      - port: 3003
        targetPort: 3003
        protocol: TCP
        name: metrics
  ingress:
    annotations:
      route.openshift.io/termination: "edge"
  pdb:
    enabled: false # enable it in PRODUCTION for having pod disruption budget.
    minAvailable: 1 # the minimum number of pods that must be available during the disruption budget.

crunchy: # enable it for TEST and PROD, for PR based pipelines simply use single postgres
  enabled: false

  crunchyImage: artifacts.developer.gov.bc.ca/bcgov-docker-local/crunchy-postgres-gis:ubi8-15.2-3.3-0

  postgresVersion: 15
  postGISVersion: "3.3"
  imagePullPolicy: Always
  instances:
    name: ha # high availability
    replicas: 1 # 2 or 3 for high availability in TEST and PROD.
    metadata:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9187"
    dataVolumeClaimSpec:
      storage: 120Mi
      storageClassName: netapp-block-standard
    requests:
      cpu: 25m
      memory: 256Mi
    limits:
      cpu: 100m
      memory: 512Mi
    replicaCertCopy:
      requests:
        cpu: 1m
        memory: 32Mi
      limits:
        cpu: 50m
        memory: 64Mi

  pgBackRest:
    enabled: false
    image: # it's not necessary to specify an image as the images specified in the Crunchy Postgres Operator will be pulled by default
    retention: "1" # Ideally a larger number such as 30 backups/days
    # If retention-full-type set to 'count' then the oldest backups will expire when the number of backups reach the number defined in retention
    # If retention-full-type set to 'time' then the number defined in retention will take that many days worth of full backups before expiration
    retentionFullType: count
    repos:
      schedules:
        full: 0 8 * * *
        incremental: 0 0,4,12,16,20 * * *
      volume:
        accessModes: "ReadWriteOnce"
        storage: 64Mi
        storageClassName: netapp-file-backup
    repoHost:
      requests:
        cpu: 1m
        memory: 64Mi
      limits:
        cpu: 50m
        memory: 128Mi
    sidecars:
      requests:
        cpu: 1m
        memory: 64Mi
      limits:
        cpu: 50m
        memory: 128Mi

  patroni:
    postgresql:
      pg_hba: "host all all 0.0.0.0/0 md5"
      parameters:
        shared_buffers: 16MB # default is 128MB; a good tuned default for shared_buffers is 25% of the memory allocated to the pod
        wal_buffers: "64kB" # this can be set to -1 to automatically set as 1/32 of shared_buffers or 64kB, whichever is larger
        min_wal_size: 32MB
        max_wal_size: 64MB # default is 1GB
        max_slot_wal_keep_size: 128MB # default is -1, allowing unlimited wal growth when replicas fall behind

  proxy:
    pgBouncer:
      image: # it's not necessary to specify an image as the images specified in the Crunchy Postgres Operator will be pulled by default
      replicas: 1
      requests:
        cpu: 1m
        memory: 64Mi
      limits:
        cpu: 50m
        memory: 128Mi

  # Postgres Cluster resource values:
  pgmonitor:
    enabled: false
    exporter:
      image: # it's not necessary to specify an image as the images specified in the Crunchy Postgres Operator will be pulled by default
      requests:
        cpu: 1m
        memory: 64Mi
      limits:
        cpu: 50m
        memory: 128Mi

bitnami-pg:
  enabled: true
  image:
    registry: ghcr.io
    repository: bcgov/nr-containers/bitnami/postgresql
    tag: 15.7.0
  auth:
    existingSecret: "{{ .Release.Name }}-database"
    username: "nr-compliance-enforcement"
    database: nr-compliance-enforcement
  shmVolume:
    enabled: false
  backup:
    enabled: false
    cronjob:
      containerSecurityContext: {}
      podSecurityContext:
        enabled: false
      storage:
        size: 256Mi
  primary:
    persistence:
      enabled: true
      storageClass: netapp-block-standard
      accessModes:
        - ReadWriteOnce
      size: 256Mi
    containerSecurityContext:
      enabled: false
    podSecurityContext:
      enabled: false
    initdb:
      scripts: # remove the below script, if POSTGIS is not required.
        postgis.sh: |
          #!/bin/sh
          PGPASSWORD=$POSTGRES_PASSWORD psql -U postgres -d postgres -c "CREATE EXTENSION postgis;"
    resources:
      requests:
        cpu: 100m
        memory: 250Mi
      limits:
        cpu: 200m
        memory: 500Mi

backup:
  enabled: false # save quota in dev environment, see gha for override
  nameOverride: ""
  fullnameOverride: ""
  image:
    repository: bcgovimages/backup-container
    pullPolicy: Always
    # Overrides the image tag whose default is the chart appVersion.
    tag: latest
  persistence:
    accessModes:
      - ReadWriteOnce
    mountPath: "/backups/"
    size: 256Mi #Volume space available for data, e.g. 512Mi, 2Gi.
    storageClass: "netapp-file-backup"
  schedule: "0 0 * * *" # cron job schedule
  strategy: "rolling" # daily or rolling
  numBackups: 5 # The number of backup files to be retained.  Used for the `daily` backup strategy.  Ignored when using the `rolling` backup strategy.
  dailyBackups: 14 # The number of daily backup files to be retained.  Used for the `rolling` backup strategy.
  weeklyBackups: 8 # The number of weekly backup files to be retained.  Used for the `rolling` backup strategy.
  monthlyBackups: 3 # The number of monthly backup files to be retained.  Used for the `rolling` backup strategy.
  serviceAccount: default # "Name of the Service Account To Execute the Job As."
  successHistoryLimit: 5 # "The number of successful jobs that will be retained"
  failedHistoryLimit: 2 # "The number of failed jobs that will be retained"
  backoffLimit: 0 # "The number of attempts to try for a successful job outcome"
  resources:
    limits:
      cpu: 150m
      memory: 256Mi
    requests:
      cpu: 10m
      memory: 128Mi

# Deploys JetStream
nats:
  enabled: true
  config:
    resources:
      requests:
        cpu: 100m
        memory: 100Mi
      limits:
        cpu: 200m
        memory: 400Mi
    jetstream:
      enabled: true
      fileStore:
        pvc:
          size: 200Mi
      memoryStore:
        enabled: true
        maxSize: 250Mi
    cluster:
      enabled: false
      replicas: 1
  natsBox:
    enabled: false
  persistence:
    enabled: true
    size: 200Mi
  reloader:
    enabled: false
  container:
    merge:
      resources:
        requests:
          cpu: 100m
          memory: 100Mi
        limits:
          cpu: 200m
          memory: 400Mi

#-- WebEOC Container
webeoc:
  #-- enable or disable backend
  enabled: true
  #-- the deployment strategy, can be "Recreate" or "RollingUpdate"
  deploymentStrategy: Recreate
  #-- autoscaling for the component. it is optional and is an object.
  autoscaling:
    #-- enable or disable autoscaling.
    enabled: true
    #-- the minimum number of replicas.
    minReplicas: 2
    #-- the maximum number of replicas.
    maxReplicas: 3
    #-- the target cpu utilization percentage, is from request cpu and NOT LIMIT CPU.
    targetCPUUtilizationPercentage: 80
  service:
    #-- the type of the service. it can be ClusterIP, NodePort, LoadBalancer, ExternalName. ClusterIP is the default and is recommended.
    type: ClusterIP
    port: 80 # this is the service port, where it will be exposed internal to the namespace.
    targetPort: 3002 # this is container port where app listens on
  pdb:
    enabled: false # enable it in PRODUCTION for having pod disruption budget.
    minAvailable: 1 # the minimum number of pods that must be available during the disruption budget.


#-- Metabase Values
metabase:
  enabled: true
  replicaCount: 1
  nameOverride: ""
  fullnameOverride: ""
  deploymentStrategy: Recreate
  image:
    repository: ghcr.io/bcgov/nr-metabase/metabase
    pullPolicy: Always
  # the below is for renovate to keep pushing PRs, so that it keeps getting updated.
  metabaseImage:
    repository: metabase/metabase
    tag: v0.51.4
  containerPort: 3000
  environment: production
  service:
    type: ClusterIP
    port: 80
    targetPort: 3000
  resources:
    limits:
      cpu: 750m
      memory: 1250Mi
    requests:
      cpu: 150m
      memory: 500Mi
  autoscaling:
    enabled: false
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}
  imagePullSecrets: []
  nodeSelector: {}
  tolerations: []
  affinity: {}

metabase-pg:
  enabled: true
  image:
    registry: ghcr.io
    repository: bcgov/nr-containers/bitnami/postgresql
    tag: 15.7.0
  auth:
    existingSecret: "{{ .Release.Name }}-metabase"
    username: "postgres"
    database: "postgres"
  shmVolume:
    enabled: false
  backup:
    enabled: false
    cronjob:
      containerSecurityContext: {}
      podSecurityContext:
        enabled: false
      storage:
        size: 256Mi
  primary:
    persistence:
      enabled: true
      storageClass: netapp-block-standard
      accessModes:
        - ReadWriteOnce
      size: 256Mi
    containerSecurityContext:
      enabled: false
    podSecurityContext:
      enabled: false
    initdb:
      scripts: # remove the below script, if POSTGIS is not required.
        postgis.sh: |
          #!/bin/sh
          PGPASSWORD=$POSTGRES_PASSWORD psql -U postgres -d postgres -c "CREATE EXTENSION postgis;"
    resources:
      requests:
        cpu: 100m
        memory: 250Mi
      limits:
        cpu: 200m
        memory: 500Mi
#-- End Metabase Values