{{- if .Values.backend.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "backend.fullname" . }}
  labels:
    {{- include "backend.labels" . | nindent 4 }}
spec:
  automountServiceAccountToken: false
  strategy:
    type: {{ .Values.backend.deploymentStrategy }}
  {{- if not .Values.backend.autoscaling.enabled }}
  replicas: {{ .Values.backend.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "backend.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        rollme: {{ randAlphaNum 5 | quote }}
      labels:
        {{- include "backend.labels" . | nindent 8 }}
    spec:
      automountServiceAccountToken: false
      {{- if .Values.backend.podSecurityContext }}
      securityContext:
        {{- toYaml .Values.backend.podSecurityContext | nindent 12 }}
      {{- end }}
      initContainers:
        - name: {{ include "backend.fullname" . }}-init
          image: "{{ .Values.global.registry }}/{{ .Values.global.repository }}/migrations:{{ .Values.global.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ default "Always" .Values.backend.imagePullPolicy }}
          {{- if not .Values.global.useCrunchy }}
          envFrom:
            - secretRef:
                name: {{ .Release.Name }}-flyway
          {{- end }}
          env:
            - name: NODE_TLS_REJECT_UNAUTHORIZED
              value: "0"
            - name: FLYWAY_BASELINE_ON_MIGRATE
              value: "true"
            - name: FLYWAY_DEFAULT_SCHEMA
              value: "public"
            - name: FLYWAY_CONNECT_RETRIES
              value: "10"
            - name: FLYWAY_LOCATIONS
              value: "{{- if eq .Release.Namespace "c1c7ed-dev" -}}{{ .Values.global.secrets.flywayLocations.dev }}{{- else if eq .Release.Namespace "c1c7ed-test" -}}{{ .Values.global.secrets.flywayLocations.test }}{{- else if eq .Release.Namespace "c1c7ed-prod" -}}{{ .Values.global.secrets.flywayLocations.prod }}{{- else -}}filesystem:./flyway/sql{{- end }}"
            {{- if and .Values.global.useCrunchy (eq .Release.Namespace "c1c7ed-dev") }}
            - name: FLYWAY_URL
              valueFrom:
                secretKeyRef:
                  name: postgres-crunchy-{{ .Values.global.crunchyClusterEnvironment }}-pguser-app-{{ .Values.global.tag | trimAll "\"" }}
                  key: pgbouncer-jdbc-uri
            {{- else if .Values.global.useCrunchy }}
            - name: FLYWAY_URL
              valueFrom:
                secretKeyRef:
                  name: postgres-crunchy-{{ .Values.global.crunchyClusterEnvironment }}-pguser-app
                  key: pgbouncer-jdbc-uri
            {{- end }}
          resources:
            requests:
              cpu: 300m
              memory: 750Mi
      containers:
        - name: {{ include "backend.fullname" . }}
          {{- if .Values.backend.securityContext }}
          securityContext:
            {{- toYaml .Values.backend.securityContext | nindent 12 }}
          {{- end }}
          image: "{{ .Values.global.registry }}/{{ .Values.global.repository }}/backend:{{ .Values.global.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ default "Always" .Values.backend.imagePullPolicy }}
          envFrom:
            - secretRef:
                name: {{ .Release.Name }}-backend
          env:
            - name: LOG_LEVEL
              value: info
            - name: NODE_TLS_REJECT_UNAUTHORIZED
              value: "0"
            {{- if and .Values.global.useCrunchy (eq .Release.Namespace "c1c7ed-dev") }}
            - name: POSTGRESQL_DATABASE
              valueFrom:
                secretKeyRef:
                  name: postgres-crunchy-{{ .Values.global.crunchyClusterEnvironment }}-pguser-app-{{ .Values.global.tag | trimAll "\"" }}
                  key: dbname
            - name: POSTGRESQL_HOST
              valueFrom:
                secretKeyRef:
                  name: postgres-crunchy-{{ .Values.global.crunchyClusterEnvironment }}-pguser-app-{{ .Values.global.tag | trimAll "\"" }}
                  key: pgbouncer-host
            - name: POSTGRESQL_USER
              valueFrom:
                secretKeyRef:
                  name: postgres-crunchy-{{ .Values.global.crunchyClusterEnvironment }}-pguser-app-{{ .Values.global.tag | trimAll "\"" }}
                  key: user
            - name: POSTGRESQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-crunchy-{{ .Values.global.crunchyClusterEnvironment }}-pguser-app-{{ .Values.global.tag | trimAll "\"" }}
                  key: password
            {{- else if .Values.global.useCrunchy }}
            - name: POSTGRESQL_DATABASE
              valueFrom:
                secretKeyRef:
                  name: postgres-crunchy-{{ .Values.global.crunchyClusterEnvironment }}-pguser-app
                  key: dbname
            - name: POSTGRESQL_HOST
              valueFrom:
                secretKeyRef:
                  name: postgres-crunchy-{{ .Values.global.crunchyClusterEnvironment }}-pguser-app
                  key: pgbouncer-host
            - name: POSTGRESQL_USER
              valueFrom:
                secretKeyRef:
                  name: postgres-crunchy-{{ .Values.global.crunchyClusterEnvironment }}-pguser-app
                  key: user
            - name: POSTGRESQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-crunchy-{{ .Values.global.crunchyClusterEnvironment }}-pguser-app
                  key: password
            {{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.backend.service.targetPort }}
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /api
              port: http
              scheme: HTTP
            initialDelaySeconds: 15
            periodSeconds: 5
            timeoutSeconds: 2
            successThreshold: 2
            failureThreshold: 30
          livenessProbe:
            successThreshold: 1
            failureThreshold: 3
            httpGet:
              path: /api
              port: 3000
              scheme: HTTP
            initialDelaySeconds: 20
            periodSeconds: 30
            timeoutSeconds: 5
          resources: # this is optional
            requests:
              cpu: 50m
              memory: 75Mi
      {{- with .Values.backend.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.backend.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app.kubernetes.io/name
                    operator: In
                    values:
                      - {{ include "backend.fullname" . }}
                  - key: app.kubernetes.io/instance
                    operator: In
                    values:
                      - {{ .Release.Name }}
              topologyKey: "kubernetes.io/hostname"

{{- end }}
