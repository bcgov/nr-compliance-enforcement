apiVersion: template.openshift.io/v1
kind: Template
labels:
  app: ${NAME}-${ZONE}
  app.kubernetes.io/part-of: ${NAME}-${ZONE}
parameters:
  - name: NAME
    description: Module name
    value: nr-compliance-enforcement
  - name: COMPONENT
    description: Component name
    value: backend
  - name: ZONE
    description: Deployment zone, e.g. pr-### or prod
    required: true
  - name: IMAGE_TAG
    description: Image tag to use
    value: latest
  - name: DOMAIN
    value: apps.silver.devops.gov.bc.ca
  - name: CPU_REQUEST
    value: "20m"
  - name: MEMORY_REQUEST
    value: "100Mi"
  - name: CPU_LIMIT
    value: "40m"
  - name: MEMORY_LIMIT
    value: "200Mi"
  - name: MIN_REPLICAS
    description: The minimum amount of replicas for the horizontal pod autoscaler.
    value: "3"
  - name: MAX_REPLICAS
    description: The maximum amount of replicas for the horizontal pod autoscaler.
    value: "5"
  - name: REGISTRY
    description: Container registry to import from (internal is image-registry.openshift-image-registry.svc:5000)
    value: ghcr.io
  - name: PROMOTE
    description: Image (namespace/name:tag) to promote/import
    value: bcgov/nr-compliance-enforcement/backend:prod
  - name: PROMOTE_MIGRATION
    description: Image (namespace/name:tag) for migration to promote/import
    value: bcgov/nr-compliance-enforcement/database-migrations:test
  - name: COMPONENT_DB_MIGRATION
    description: Component name for database migrations
    value: database-migrations
objects:
  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        app: ${NAME}-${ZONE}
      name: ${NAME}-${ZONE}-${COMPONENT}
    spec:
      lookupPolicy:
        local: false
      tags:
        - name: ${IMAGE_TAG}
          from:
            kind: DockerImage
            name: ${REGISTRY}/${PROMOTE}
          referencePolicy:
            type: Local
  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        app: ${NAME}-${ZONE}
      name: ${NAME}-${ZONE}-${COMPONENT_DB_MIGRATION}
    spec:
      lookupPolicy:
        local: false
      tags:
        - name: ${IMAGE_TAG}
          from:
            kind: DockerImage
            name: ${REGISTRY}/${PROMOTE_MIGRATION}
          referencePolicy:
            type: Local
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        app: ${NAME}-${ZONE}
      name: ${NAME}-${ZONE}-${COMPONENT}
    spec:
      replicas: 1
      triggers:
        - type: ConfigChange
        - type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
              - ${NAME}
            from:
              kind: ImageStreamTag
              name: ${NAME}-${ZONE}-${COMPONENT}:${IMAGE_TAG}
        - type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
              - ${NAME}-${COMPONENT_DB_MIGRATION}
            from:
              kind: ImageStreamTag
              name: ${NAME}-${ZONE}-${COMPONENT_DB_MIGRATION}:${IMAGE_TAG}
      selector:
        deploymentconfig: ${NAME}-${ZONE}-${COMPONENT}
      strategy:
        type: Rolling
      template:
        metadata:
          labels:
            app: ${NAME}-${ZONE}
            deploymentconfig: ${NAME}-${ZONE}-${COMPONENT}
        spec:
          containers:
            - image: ${NAME}-${ZONE}-${COMPONENT}:${IMAGE_TAG}
              imagePullPolicy: Always
              name: ${NAME}
              env:
                - name: NODE_TLS_REJECT_UNAUTHORIZED
                  value: "0"
                - name: POSTGRESQL_HOST
                  value: ${NAME}-${ZONE}-database
                - name: POSTGRESQL_DATABASE
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}-${ZONE}-database
                      key: database-name
                - name: POSTGRESQL_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}-${ZONE}-database
                      key: database-password
                - name: POSTGRESQL_USER
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}-${ZONE}-database
                      key: database-user
                - name: KEYCLOCK_CLIENT_ID
                  valueFrom:
                    secretKeyRef:
                      name: ceds-backend-oicd
                      key: keycloak-client-id
                - name: JWKS_URI
                  valueFrom:
                    secretKeyRef:
                      name: ceds-backend-oicd
                      key: jwks-uri
                - name: JWT_ISSUER
                  valueFrom:
                    secretKeyRef:
                      name: ceds-backend-oicd
                      key: jwt-issuer
                - name: BC_GEOCODER_API_URL
                  valueFrom:
                    secretKeyRef:
                      name: bc-geo-coder
                      key: BC_GEOCODER_API_URL
                - name: COMPLAINTS_API_KEY
                  valueFrom:
                    secretKeyRef:
                      name: webeoc
                      key: complaints-api-key
                - name: CASE_MANAGEMENT_API_URL
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}-${ZONE}-case-management
                      key: case-management-api-url
              ports:
                - containerPort: 3000
                  protocol: TCP
              resources:
                requests:
                  cpu: ${CPU_REQUEST}
                  memory: ${MEMORY_REQUEST}
                limits:
                  cpu: ${CPU_LIMIT}
                  memory: ${MEMORY_LIMIT}
              readinessProbe:
                httpGet:
                  path: /
                  port: 3000
                  scheme: HTTP
                initialDelaySeconds: 60
                periodSeconds: 15
                timeoutSeconds: 5
              livenessProbe:
                successThreshold: 1
                failureThreshold: 3
                httpGet:
                  path: /
                  port: 3000
                  scheme: HTTP
                initialDelaySeconds: 60
                periodSeconds: 30
                timeoutSeconds: 5
          initContainers:
            - name: ${NAME}-${COMPONENT_DB_MIGRATION}
              image: ${NAME}-${ZONE}-${COMPONENT_DB_MIGRATION}:${IMAGE_TAG}
              env:
                - name: FLYWAY_URL
                  value: "jdbc:postgresql://${NAME}-${ZONE}-database:5432/${NAME}"
                - name: FLYWAY_USER
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}-${ZONE}-database
                      key: database-user
                - name: FLYWAY_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}-${ZONE}-database
                      key: database-password
                - name: FLYWAY_BASELINE_ON_MIGRATE
                  value: "true"
                - name: FLYWAY_DEFAULT_SCHEMA
                  value: "public"
              resources:
                requests:
                  cpu: ${CPU_REQUEST}
                  memory: ${MEMORY_REQUEST}
                limits:
                  cpu: ${CPU_LIMIT}
                  memory: ${MEMORY_LIMIT}
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: ${NAME}-${ZONE}
      name: ${NAME}-${ZONE}-${COMPONENT}
    spec:
      ports:
        - name: 3000-tcp
          protocol: TCP
          port: 80
          targetPort: 3000
      selector:
        deploymentconfig: ${NAME}-${ZONE}-${COMPONENT}
  - apiVersion: route.openshift.io/v1
    kind: Route
    metadata:
      labels:
        app: ${NAME}-${ZONE}
      name: ${NAME}-${ZONE}-${COMPONENT}
    spec:
      host: ${NAME}-${ZONE}-${COMPONENT}.${DOMAIN}
      port:
        targetPort: 3000-tcp
      to:
        kind: Service
        name: ${NAME}-${ZONE}-${COMPONENT}
        weight: 100
      tls:
        termination: edge
        insecureEdgeTerminationPolicy: Redirect
  - apiVersion: autoscaling/v2
    kind: HorizontalPodAutoscaler
    metadata:
      name: ${NAME}-${ZONE}-${COMPONENT}
    spec:
      scaleTargetRef:
        apiVersion: apps.openshift.io/v1
        kind: DeploymentConfig
        name: ${NAME}-${ZONE}-${COMPONENT}
      minReplicas: ${{MIN_REPLICAS}}
      maxReplicas: ${{MAX_REPLICAS}}
      metrics:
        - type: Resource
          resource:
            name: cpu
            target:
              type: Utilization
              averageUtilization: 100
