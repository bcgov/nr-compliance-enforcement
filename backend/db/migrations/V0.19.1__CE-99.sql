CREATE TABLE public.complaint_update (
	complaint_update_guid uuid DEFAULT uuid_generate_v4() NOT NULL,
	complaint_identifier varchar(20) NOT NULL,
	update_seq_number int4 NOT NULL,
	upd_detail_text text NULL,
	upd_location_summary_text varchar(120) NULL,
	upd_location_detailed_text varchar(4000) NULL,
	upd_location_geometry_point public.geometry NULL,
	create_user_id varchar(32) NOT NULL,
	create_utc_timestamp timestamp NOT NULL,
	update_user_id varchar(32) NOT NULL,
	update_utc_timestamp timestamp NULL,
	CONSTRAINT complaint_update_pk PRIMARY KEY (complaint_update_guid),
	CONSTRAINT complaint_update_fk FOREIGN KEY (complaint_identifier) REFERENCES public.complaint(complaint_identifier)
);
COMMENT ON TABLE public.complaint_update IS 'Callers will sometimes call in with a COMPLAINT_UPDATE.   This table is used to track items that are considered to be amendments to the complaint information such as additional details, or location information.';

-- Column comments

COMMENT ON COLUMN public.complaint_update.complaint_update_guid IS 'System generated unique key for a complaint update.  This key should never be exposed to users via any system utilizing the tables.';
COMMENT ON COLUMN public.complaint_update.complaint_identifier IS 'Natural key for a complaint generated by webEOC.  Format is YY-250744772125074477212507447721 where the number portion of the sequence resets to 0 on the new year.';
COMMENT ON COLUMN public.complaint_update.update_seq_number IS 'An integer that is used to reflect the order that complaint updates were entered into the call center system.';
COMMENT ON COLUMN public.complaint_update.upd_detail_text IS 'Verbatim details of the complaint as recorded by the call centre or through the web form.';
COMMENT ON COLUMN public.complaint_update.upd_location_summary_text IS 'A brief summary of the location of the complaint.';
COMMENT ON COLUMN public.complaint_update.upd_location_detailed_text IS 'A more detailed description of the location of the complaint.';
COMMENT ON COLUMN public.complaint_update.upd_location_geometry_point IS 'The closest approximation to where the incident occurred.   Stored as a geometric point using the EPSG:3005 Projected Coordinate System (BC Albers)';
COMMENT ON COLUMN public.complaint_update.create_user_id IS 'The id of the user that created the complaint update record.';
COMMENT ON COLUMN public.complaint_update.create_utc_timestamp IS 'The timestamp when the complaint update record was created.  The timestamp is stored in UTC with no Offset.';
COMMENT ON COLUMN public.complaint_update.update_user_id IS 'The id of the user that updated the complaint update record.';
COMMENT ON COLUMN public.complaint_update.update_utc_timestamp IS 'The timestamp when the complaint_update record was updated.  The timestamp is stored in UTC with no Offset.';

create or replace
function public.insert_complaint_update_from_staging(_complaint_identifier character varying,
_update_number int4)
 returns void
 language plpgsql
as $function$
  declare
-- used to determine if an update comes in that's the same as the previous complaint update
prev_complaint_update_record public.complaint_update;
-- Variable to hold the JSONB data from staging_complaint.  Used to create a new complaint 
complaint_data jsonb;
-- Variables for 'complaint' table
_upd_detail_text text;

_upd_location_summary_text VARCHAR(120);

_upd_location_detailed_text VARCHAR(4000);

_update_address_coordinates_lat VARCHAR(200);

_update_address_coordinates_long VARCHAR(200);

_upd_location_geometry_point geometry;

_create_utc_timestamp timestamp := (now() at TIME zone 'UTC');

_update_utc_timestamp timestamp := (now() at TIME zone 'UTC');

_create_userid VARCHAR(200);

_update_userid VARCHAR(200);

begin
-- Fetch the JSONB data from complaint_staging using the provided identifier
    select
	sc.complaint_jsonb
    into
	complaint_data
from
	staging_complaint sc
where
	sc.complaint_identifier = _complaint_identifier
	and (sc.complaint_jsonb->>'update_number')::int = _update_number
	and sc.staging_status_code = 'PENDING'
	-- meaning that this complaint hasn't yet been moved to the complaint table yet
	and sc.staging_activity_code = 'UPDATE';
-- this means that we're dealing with a new complaint from webeoc, not an update
    
    if complaint_data is null then
      return;
end if;
-- Extract and prepare data for 'complaint_update' table
_upd_detail_text := complaint_data ->> 'update_call_details';

_upd_location_summary_text := complaint_data ->> 'update_address';

_upd_location_detailed_text := complaint_data ->> 'update_location_decription';

_update_address_coordinates_lat := complaint_data ->> 'update_address_coordinates_lat';

_update_address_coordinates_long := complaint_data ->> 'update_address_coordinates_long';

_create_userid := complaint_data ->> 'username';

_update_userid := complaint_data ->> 'username';
-- create a geometry point based on the latitude and longitude
_upd_location_geometry_point := ST_SetSRID(ST_MakePoint(cast(_update_address_coordinates_long as numeric),
cast(_update_address_coordinates_lat as numeric)),
4326);
-- get the previous update, we want to make sure that this update is actually different
	select
	*
    into
	prev_complaint_update_record
from
	public.complaint_update
where
	complaint_identifier = _complaint_identifier
	and update_seq_number = _update_number - 1;
-- If there is no previous record or if there are changes in any of the columns, insert a new record
    if not found
or (prev_complaint_update_record.upd_detail_text <> _upd_detail_text
	or
                      prev_complaint_update_record.upd_location_summary_text <> _upd_location_summary_text
	or
                      prev_complaint_update_record.upd_location_detailed_text <> _upd_location_detailed_text
	or
                      prev_complaint_update_record.upd_location_geometry_point <> _upd_location_geometry_point
	or
                      prev_complaint_update_record.create_user_id <> _create_userid
	or
                      prev_complaint_update_record.update_user_id <> _update_userid
	or
                      prev_complaint_update_record.create_utc_timestamp <> _create_utc_timestamp
	or
                      prev_complaint_update_record.update_utc_timestamp <> _update_utc_timestamp) then
-- Insert data into 'complaint' table
    insert
	into
	PUBLIC.complaint_update
                (
                            complaint_identifier,
	update_seq_number ,
	upd_detail_text,
	upd_location_summary_text,
	upd_location_detailed_text,
	upd_location_geometry_point,
	create_user_id,
	create_utc_timestamp,
	update_user_id,
	update_utc_timestamp
                )
values
                (
                            _complaint_identifier,
                            _update_number,
                            _upd_detail_text,
                            _upd_location_summary_text,
                            _upd_location_detailed_text,
                            _upd_location_geometry_point,
                            _create_userid,
                            _create_utc_timestamp,
                            _update_userid,
                            _update_utc_timestamp
                );
end if;

update
	staging_complaint
set
	staging_status_code = 'SUCCESS'
where
	complaint_identifier = _complaint_identifier
	and (complaint_jsonb->>'update_number')::int = _update_number
	and staging_activity_code = 'UPDATE';

exception
when others then
    raise notice 'An unexpected error occurred: %',
sqlerrm;

update
	staging_complaint
set
	staging_status_code = 'ERROR'
where
	complaint_identifier = _complaint_identifier
	and staging_status_code = 'PENDING'
	and staging_activity_code = 'UPDATE';
end;

$function$
;
