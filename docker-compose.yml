---
version: "3.8"

x-var:
  - &POSTGRES_USER postgres
  - &POSTGRES_PASSWORD default
  - &COMPLAINT_PASSWORD default
  - &COMPLAINT_OUTCOME_PASSWORD default2
  - &INS_PASSWORD default3
  - &INV_PASSWORD default4
  - &SHARED_PASSWORD default5
  - &POSTGRES_DATABASE postgres

x-postgres-vars: &postgres-vars
  POSTGRES_HOST: database
  POSTGRES_USER: *POSTGRES_USER
  POSTGRES_PASSWORD: *POSTGRES_PASSWORD
  COMPLAINT_PASSWORD: *COMPLAINT_PASSWORD
  COMPLAINT_OUTCOME_PASSWORD: *COMPLAINT_OUTCOME_PASSWORD
  INS_PASSWORD: *INS_PASSWORD 
  INV_PASSWORD: *INV_PASSWORD 
  SHARED_PASSWORD: *SHARED_PASSWORD
  POSTGRES_DATABASE: *POSTGRES_DATABASE

services:
  database:
    build:
      context: database
    container_name: database
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: default
      POSTGRES_DB: postgres
    hostname: database
    restart: always
    user: postgres
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 15s
      timeout: 5s
      retries: 3
    volumes:
      - /pgdata
  migrations-complaint:
    image: flyway/flyway:10-alpine
    container_name: migrations-complaint
    command:
      - info
      - migrate
      - -outOfOrder=true
    volumes:
      - "./migrations-complaint/migrations:/flyway/sql"
      - "./migrations-complaint/test-only-migrations:/flyway/sql-test"
      - "./migrations-complaint/baseline:/flyway/baseline"
    environment:
      FLYWAY_URL: jdbc:postgresql://database:5432/postgres?currentSchema=complaint,public
      FLYWAY_USER: postgres
      FLYWAY_PASSWORD: default
      FLYWAY_PLACEHOLDERS_COMPLAINT_PASSWORD: *COMPLAINT_PASSWORD
      FLYWAY_BASELINE_ON_MIGRATE: true
      FLYWAY_DEFAULT_SCHEMA: complaint
      FLYWAY_LOCATIONS: filesystem:./sql, filesystem:./sql-test, filesystem:./baseline
    depends_on:
      database:
        condition: service_healthy
  migrations-investigation:
    image: flyway/flyway:10-alpine
    container_name: migrations-investigation
    command:
      - info
      - migrate
      - -outOfOrder=true
    volumes:
      - "./migrations-investigation/migrations:/flyway/sql"
      - "./migrations-investigation/test-only-migrations:/flyway/sql-test"
      - "./migrations-investigation/baseline:/flyway/baseline"
    environment:
      FLYWAY_URL: jdbc:postgresql://database:5432/postgres?currentSchema=investigation,public
      FLYWAY_USER: postgres
      FLYWAY_PASSWORD: default
      FLYWAY_PLACEHOLDERS_INVESTIGATION_PASSWORD: *INV_PASSWORD
      FLYWAY_BASELINE_ON_MIGRATE: true
      FLYWAY_DEFAULT_SCHEMA: investigation
      FLYWAY_LOCATIONS: filesystem:./sql, filesystem:./sql-test, filesystem:./baseline
    depends_on:
      database:
        condition: service_healthy
  migrations-inspection:
    image: flyway/flyway:10-alpine
    container_name: migrations-inspection
    command:
      - info
      - migrate
      - -outOfOrder=true
    volumes:
      - "./migrations-inspection/migrations:/flyway/sql"
      - "./migrations-inspection/test-only-migrations:/flyway/sql-test"
      - "./migrations-inspection/baseline:/flyway/baseline"
    environment:
      FLYWAY_URL: jdbc:postgresql://database:5432/postgres?currentSchema=inspection,public
      FLYWAY_USER: postgres
      FLYWAY_PASSWORD: default
      FLYWAY_PLACEHOLDERS_INSPECTION_PASSWORD: *INS_PASSWORD
      FLYWAY_BASELINE_ON_MIGRATE: true
      FLYWAY_DEFAULT_SCHEMA: inspection
      FLYWAY_LOCATIONS: filesystem:./sql, filesystem:./sql-test, filesystem:./baseline
    depends_on:
      database:
        condition: service_healthy
  migrations-shared:
    image: flyway/flyway:10-alpine
    container_name: migrations-shared
    command:
      - info
      - migrate
      - -outOfOrder=true
    volumes:
      - "./migrations-shared/migrations:/flyway/sql"
      - "./migrations-shared/test-only-migrations:/flyway/sql-test"
      - "./migrations-shared/baseline:/flyway/baseline"
    environment:
      FLYWAY_URL: jdbc:postgresql://database:5432/postgres?currentSchema=shared,public
      FLYWAY_USER: postgres
      FLYWAY_PASSWORD: default
      FLYWAY_BASELINE_ON_MIGRATE: true
      FLYWAY_PLACEHOLDERS_SHARED_PASSWORD: *SHARED_PASSWORD
      FLYWAY_DEFAULT_SCHEMA: shared
      FLYWAY_LOCATIONS: filesystem:./sql, filesystem:./sql-test, filesystem:./baseline
    depends_on:
      database:
        condition: service_healthy
  migrations-complaint-outcome:
    image: flyway/flyway:10-alpine
    container_name: migrations-complaint-outcome
    command:
      - info
      - migrate
      - -outOfOrder=true
    volumes:
      - "./migrations-complaint-outcome/migrations:/flyway/sql"
      - "./migrations-complaint-outcome/test-only-migrations:/flyway/sql-test"
      - "./migrations-complaint-outcome/baseline:/flyway/baseline"
    environment:
      FLYWAY_URL: jdbc:postgresql://database:5432/postgres?currentSchema=complaint_outcome,public
      FLYWAY_USER: postgres
      FLYWAY_PASSWORD: default
      FLYWAY_BASELINE_ON_MIGRATE: true
      FLYWAY_PLACEHOLDERS_COMPLAINT_OUTCOME_PASSWORD: *COMPLAINT_OUTCOME_PASSWORD
      FLYWAY_DEFAULT_SCHEMA: complaint_outcome
      FLYWAY_LOCATIONS: filesystem:./sql, filesystem:./sql-test, filesystem:./baseline
    depends_on:
      database:
        condition: service_healthy
  backend:
    container_name: backend
    entrypoint:
      - "sh"
      - "-c"
      - "npm i && npm run start"
    environment:
      NODE_ENV: development
      POSTGRESQL_HOST: database
      POSTGRESQL_USER: postgres
      POSTGRESQL_PASSWORD: default
      POSTGRESQL_DATABASE: postgres
    hostname: backend
    image: registry.access.redhat.com/ubi8/nodejs-18-minimal@sha256:dfaa7bbc56a7fb02046d2e89e74a65693c522d8e25d4f318c676f0ad15e67168
    links:
      - database
    ports:
      - "3001:3000"
    volumes:
      - ./backend:/app:z
      - /app/node_modules
    user: root
    working_dir: "/app"
    depends_on:
      database:
        condition: service_healthy
      migrations-complaint:
        condition: service_started
  frontend:
    container_name: frontend
    entrypoint:
      - "sh"
      - "-c"
      - "chown -R root . && npm ci && npm run dev"
    environment:
      NODE_ENV: development
      VITE_API_URL: http://localhost:3001/api
      VITE_ENVIRONMENT_NAME: DEVELOPMENT
    hostname: frontend
    image: node:22-alpine
    links:
      - backend
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app:z
      - /app/node_modules
    user: root
    working_dir: "/app"
  nats:
    image: nats:latest # Using the latest official NATS image
    command:
      - "-js"
      - "-DVV"
    ports:
      - "4222:4222" # Default NATS client port
      - "8222:8222" # NATS monitoring port
    environment:
      - NATS_USER=natsuser # this is just for the developer instance of nats
      - NATS_PASSWORD=natspass # this is just for the developer instance of nats
  webeoc:
    container_name: webeoc
    entrypoint:
      - "sh"
      - "-c"
      - "npm i && npm run start"
    hostname: webeoc
    image: registry.access.redhat.com/ubi8/nodejs-18-minimal@sha256:dfaa7bbc56a7fb02046d2e89e74a65693c522d8e25d4f318c676f0ad15e67168
    links:
      - nats
    ports:
      - "3002:3000"
    volumes:
      - ./webeoc:/app:z
      - /app/node_modules
      - ./webeoc/logs:/mnt/data # this is just for the developer webeoc logging
    user: root
    working_dir: "/app"
  backend-cm:
    container_name: backend-cm
    entrypoint: sh -c "npm i && npm run prisma-generate-complaint-outcome && \
      npm run prisma-generate-shared && \
      npm run prisma-generate-investigation && \
      npm run prisma-generate-inspection && \
      npm run start:dev"
    environment:
      <<: *postgres-vars
      NODE_ENV: development
      POSTGRESQL_URL: "postgresql://postgres:{POSTGRES_PASSWORD}@cm-database:5432/postgres?schema=public,shared,investgation,inspection,complaint_outcome"
      BACKEND_PORT: "3000"
      KEYCLOCK_CLIENT_ID: compliance-and-enforcement-digital-services-web-4794
      JWKS_URI: https://dev.loginproxy.gov.bc.ca/auth/realms/standard/protocol/openid-connect/certs
      JWT_ISSUER: https://dev.loginproxy.gov.bc.ca/auth/realms/standard
    image: node:20-bullseye
    ports: ["3003:3000"]
    volumes: ["./backend-cm:/app", "/app/node_modules"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api"]
    working_dir: "/app"
    depends_on:
      migrations-complaint-outcome:
        condition: service_completed_successfully
