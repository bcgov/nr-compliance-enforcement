name: Release To Production

on:
  workflow_dispatch:
    inputs:
      release_branch:
        description: "Specify the release branch to get the latest PR number from, like `release/myrelease`"
        required: true

concurrency:
  # Do not interrupt previous workflows
  group: ${{ github.workflow }}
  cancel-in-progress: false

jobs:
  vars:
    name: Set Variables
    outputs:
      pr: ${{ steps.latest-pr.outputs.pr }}
    runs-on: ubuntu-22.04
    timeout-minutes: 1
    steps:
      - name: Verify Is Main Branch
        if: github.event_name == 'workflow_dispatch' && github.ref != 'refs/heads/main'
        run: |
          echo "This workflow should not be triggered with workflow_dispatch on a branch other than main"
          exit 1
      - uses: actions/checkout@v4
      - name: Get Latest PR Number in release branch
        id: latest-pr
        uses: ./.github/actions/get-latest-pr-number
        with:
          release_branch: ${{ github.event.inputs.release_branch }}
      - name: Set PR Output
        run: echo "pr=${{ steps.latest-pr.outputs.pr }}" >> $GITHUB_OUTPUT

  create_release:
    name: Create GitHub Release (Keep Version)
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        package: [backend, frontend, webeoc]
    steps:
      - uses: actions/checkout@v4

      # Retrieve the latest tag (from the release branch)
      - name: Get Latest Tag
        id: tag
        run: |
          git fetch --tags
          latest_tag=$(git describe --tags --abbrev=0 --match "v*.*.*")
          echo "::set-output name=latest_tag::$latest_tag"
          echo "Latest tag: $latest_tag"

      # Create GitHub Release using the last tag
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.tag.outputs.latest_tag }}
          name: Release ${{ steps.tag.outputs.latest_tag }}
          body: |
            ## Changes in this release:
            - New features and bug fixes.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # https://github.com/bcgov/quickstart-openshift-helpers
  deploy-prod:
    name: Deploy (prod)
    needs: [vars]
    uses: bcgov/quickstart-openshift-helpers/.github/workflows/.deployer.yml@v0.8.3
    secrets:
      oc_namespace: ${{ vars.OC_NAMESPACE }}
      oc_token: ${{ secrets.OC_BEARER_TOKEN }}
    with:
      environment: prod
      tag: ${{ needs.vars.outputs.pr }}
      params: --set backend.deploymentStrategy=RollingUpdate
        --set frontend.deploymentStrategy=RollingUpdate
        --set webeoc.deploymentStrategy=RollingUpdate
        --set global.autoscaling=true
        --set frontend.pdb.enabled=true
        --set backend.pdb.enabled=true
        --set webeoc.pdb.enabled=true
        --set nats.config.cluster.replicas=3
        --set nats.config.cluster.enabled=true
        --set bitnami-pg.backup.cronjob.storage.size=512Mi
        --set bitnami-pg.primary.persistence.size=512Mi
        --set backup.enabled=true
        --set backup.persistence.size=256Mi

  healthcheck:
    name: Healthcheck Prod Deployment
    runs-on: ubuntu-22.04
    needs: [vars]
    environment: prod
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
      - run: |
          sleep 120 # wait for helm release to startup
          ./.github/scripts/rollout_healthcheck.sh
        env:
          FORCE_PASS: 1 # to prevent pipeline blocking
          TIMEOUT_SECONDS: 420 # 7m
          POLL_INTERVAL_SECONDS: 15
          LABEL_SELECTOR: "app.kubernetes.io/instance=nr-compliance-enforcement-prod"
          OC_NAMESPACE: ${{ vars.OC_NAMESPACE }}
          OC_SERVER: ${{ vars.OC_SERVER }}
          OC_TOKEN: ${{ secrets.OC_TOKEN }}

  promote:
    name: Promote Images
    needs: [deploy-prod, vars]
    runs-on: ubuntu-22.04
    permissions:
      packages: write
    strategy:
      matrix:
        package: [migrations, backend, frontend, webeoc]
    timeout-minutes: 1
    steps:
      - uses: shrink/actions-docker-registry-tag@v4
        with:
          registry: ghcr.io
          repository: ${{ github.repository }}/${{ matrix.package }}
          target: ${{ needs.vars.outputs.pr }}
          tags: prod
