name: Merge to Release

on:
  push:
    branches: [release/*]
    paths-ignore:
      - "*.md"
      - ".github/**"
      - ".github/graphics/**"
      - "!.github/workflows/**"
  workflow_dispatch:
    inputs:
      pr_no:
        description: "PR-numbered container set to deploy"
        type: number
        required: true

concurrency:
  # Do not interrupt previous workflows
  group: ${{ github.workflow }}
  cancel-in-progress: false

jobs:
  vars:
    name: Set Variables
    outputs:
      pr: ${{ steps.pr.outputs.pr }}
    runs-on: ubuntu-22.04
    timeout-minutes: 1
    steps:
      - uses: actions/checkout@v4
      # Get PR number for squash merges to release
      - name: PR Number
        id: pr
        uses: ./.github/actions/get-pr-number
      - name: Set PR Output
        run: echo "pr=${{ steps.pr.outputs.pr }}" >> $GITHUB_OUTPUT
  bump_version:
    name: Bump Version for Release Branch
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        package: [backend, frontend, webeoc]
    steps:
      - uses: actions/checkout@v4

      - name: Install jq (JSON parser)
        run: sudo apt-get install -y jq

      # Check if it's the first PR into the release branch (no existing tags)
      - name: Check for existing tags
        id: check_tag
        run: |
          git fetch --tags
          latest_tag=$(git describe --tags --abbrev=0 --match "v*.*.*" || echo "none")
          echo "::set-output name=latest_tag::$latest_tag"

      # If it's the first PR into the release branch, reset patch and bump minor version
      - name: Bump minor version and reset patch for first PR
        if: ${{ steps.check_tag.outputs.latest_tag == 'none' }}
        run: |
          cd ${{ matrix.package }}
          current_version=$(jq -r '.version' package.json)
          new_version=$(echo $current_version | awk -F. '{$2+=1; $3=0; print $1"."$2"."$3}')
          jq --arg v "$new_version" '.version = $v' package.json > package.json.tmp && mv package.json.tmp package.json
          echo "First PR: Resetting patch and bumping minor. New version: $new_version"

      # For subsequent PRs into the release branch, just bump the patch version
      - name: Bump patch version for subsequent PRs
        if: ${{ steps.check_tag.outputs.latest_tag != 'none' }}
        run: |
          cd ${{ matrix.package }}
          current_version=$(jq -r '.version' package.json)
          new_version=$(echo $current_version | awk -F. '{$3+=1; print $1"."$2"."$3}')
          jq --arg v "$new_version" '.version = $v' package.json > package.json.tmp && mv package.json.tmp package.json
          echo "Subsequent PR: Bumping patch. New version: $new_version"

      - name: Set Git Identity
        run: |
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

      - name: Commit and push version bump
        run: |
          git add ${{ matrix.package }}/package.json
          git commit -m "chore(${{ matrix.package }}): bump version"
          git push origin HEAD

      - name: Tag the new version
        run: |
          new_version=$(jq -r '.version' ${{ matrix.package }}/package.json)
          git tag "v$new_version"
          git push origin "v$new_version"

  # https://github.com/bcgov/quickstart-openshift-helpers
  deploy-test:
    name: Deploy (test)
    needs: vars
    uses: bcgov/quickstart-openshift-helpers/.github/workflows/.deployer.yml@v0.5.0
    secrets:
      oc_namespace: ${{ secrets.OC_NAMESPACE }}
      oc_token: ${{ secrets.OC_TOKEN }}
    with:
      environment: test
      tag: ${{ needs.vars.outputs.pr }}

  promote:
    name: Promote Images
    needs: [deploy-test, vars]
    runs-on: ubuntu-22.04
    permissions:
      packages: write
    strategy:
      matrix:
        package: [migrations, backend, frontend, webeoc]
    timeout-minutes: 1
    steps:
      - uses: shrink/actions-docker-registry-tag@v4
        with:
          registry: ghcr.io
          repository: ${{ github.repository }}/${{ matrix.package }}
          target: ${{ needs.vars.outputs.pr }}
          tags: test
  generate-schema-spy:
    name: Generate SchemaSpy Documentation
    runs-on: ubuntu-22.04
    services:
      postgres:
        image: postgis/postgis:16-3.4
        env:
          POSTGRES_DB: default
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: default
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - name: Flyway
        uses: docker://flyway/flyway:10
        env:
          FLYWAY_URL: jdbc:postgresql://postgres:5432/default
          FLYWAY_USER: postgres
          FLYWAY_PASSWORD: default
          FLYWAY_LOCATIONS: filesystem:./migrations/migrations
          FLYWAY_DEFAULT_SCHEMA: "public"
        with:
          args: info migrate info

      - name: Create Output Folder
        run: |
          mkdir output
          chmod a+rwx -R output
      - name: Run Schemaspy
        run: docker run --network host -v "$PWD/output:/output" schemaspy/schemaspy:6.2.4 -t pgsql11 -db default -host 127.0.0.1 -port 5432 -u postgres -p default -schemas public

      - name: Deploy to Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: output
          target-folder: schemaspy
