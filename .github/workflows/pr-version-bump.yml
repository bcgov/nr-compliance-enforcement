name: Handle PR Merge and Version Update
on:
  issue_comment:
    types: [created, edited]

jobs:
  handle_pr:
    name: Handle Merged PR
    runs-on: ubuntu-22.04
    permissions:
      contents: "write"
      packages: "write"
      actions: "read"
    if: ${{ github.event.issue.pull_request }} && ${{ contains(github.event.comment.body, '/patch_version') }}
    steps:
      - name: Decode the GitHub App Private Key
        id: decode-app-private-key
        run: |
          private_key=$(echo "${{ secrets.TEAM_WOLVERINE_GITHUB_APP_PRIVATE_KEY }}" | base64 -d | awk 'BEGIN {ORS="\\n"} {print}' | head -c -2) &> /dev/null
          echo "::add-mask::$private_key"
          echo "app-private-key=$private_key" >> "$GITHUB_OUTPUT"

      - uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ vars.TEAM_WOLVERINE_GITHUB_APP_ID }}
          private-key: ${{ steps.decode-app-private-key.outputs.app-private-key }}

      - name: Get PR Details
        id: pr-details
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
        run: |
          PR_DATA=$(gh api /repos/${{ github.repository }}/pulls/${{ github.event.issue.number }})
          echo "ref=$(echo $PR_DATA | jq -r .head.ref)" >> $GITHUB_OUTPUT

      - uses: actions/checkout@v4
        with:
          ref: ${{ steps.pr-details.outputs.ref }}
          fetch-depth: 0
          fetch-tags: true
          token: ${{ steps.app-token.outputs.token }}

      - name: Get GitHub App User ID
        id: get-user-id
        run: echo "user-id=$(gh api "/users/${{ steps.app-token.outputs.app-slug }}[bot]" --jq .id)" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
      - run: |
          git config --global user.name '${{ steps.app-token.outputs.app-slug }}[bot]'
          git config --global user.email '${{ steps.get-user-id.outputs.user-id }}+${{ steps.app-token.outputs.app-slug }}[bot]@users.noreply.github.com'

      - name: Update package.json versions
        id: increment_version
        # The old and new versions are currently being read from the frontend package.json
        # since all three packages are being kept in sync.
        run: |
          cd frontend
          echo "::set-output name=old_version::$(npm pkg get version | tr -d '"')"
          npm version patch --no-git-tag-version
          echo "::set-output name=new_version::$(npm pkg get version | tr -d '"')"
          new_v=$(npm pkg get version | tr -d '"')
          echo "Frontend package.json version updated to $new_v"
          cd ../backend
          npm version $new_v --no-git-tag-version
          echo "Backend package.json version updated to $new_v"
          cd ../webeoc
          npm version $new_v --no-git-tag-version
          echo "WebEOC package.json version updated to $new_v"
          cd ..
      - name: Update helm chart version and appVersion in Chart.yaml
        run: |
          sed -i'' -e 's/^version:.*$/version: ${{ steps.increment_version.outputs.new_version }}/' charts/app/Chart.yaml
          sed -i'' 's/^appVersion:.*$/appVersion: ${{ steps.increment_version.outputs.new_version }}/' charts/app/Chart.yaml
      - name: Commit and Push Version Update
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
        run: |
          git add frontend/package.json backend/package.json webeoc/package.json charts/app/Chart.yaml
          git commit -m "chore: bump version to ${{ steps.increment_version.outputs.new_version }}"
          git push origin HEAD:${{ steps.pr-details.outputs.ref }}
      - name: Create Git Tag and Delete Old Tag
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
        run: |
          git tag "v${{ steps.increment_version.outputs.new_version }}"
          git push origin v${{ steps.increment_version.outputs.new_version }}
          git push --delete origin "v${{ steps.increment_version.outputs.old_version }}"
