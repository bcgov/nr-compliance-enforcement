name: PR Closed

on:
  pull_request:
    types: [closed]

concurrency:
  # PR open and close use the same group, allowing only one at a time
  group: ${{ github.event.number }}
  cancel-in-progress: true

env:
  GITOPS_REPO_BRANCH: main
  GITOPS_REPO: bcgov-c/tenant-gitops-f208ae
  GITOPS_REPO_VALUES_PATH: ./charts/apps/natsuite/values
  GITOPS_REPO_OUTPUTS_PATH: ./charts/apps/natsuite/values/.outputs

jobs:
  cleanup:
    name: Cleanup and Images
    uses: bcgov/quickstart-openshift-helpers/.github/workflows/.pr-close.yml@v0.5.0
    secrets:
      oc_namespace: ${{ secrets.OC_NAMESPACE }}
      oc_token: ${{ secrets.OC_TOKEN }}
    with:
      cleanup: helm
      packages: backend frontend migrations

  cleanup-labeled:
    name: Cleanup Labeled Resources
    uses: bcgov/quickstart-openshift-helpers/.github/workflows/.pr-close.yml@v0.5.0
    secrets:
      oc_namespace: ${{ secrets.OC_NAMESPACE }}
      oc_token: ${{ secrets.OC_TOKEN }}
    with:
      cleanup: label

  cleanup-pvcs:
    name: Cleanup Project PVCs
    runs-on: ubuntu-22.04
    environment:
    timeout-minutes: 2
    steps:
      - uses: actions/checkout@v4
      - run: ./.github/scripts/cleanup_pvcs.sh
        env:
          OC_NAMESPACE: ${{ secrets.OC_NAMESPACE }}
          OC_SERVER: ${{ vars.OC_SERVER }}
          OC_TOKEN: ${{ secrets.OC_TOKEN }}
          PR_NUMBER: ${{ github.event.number }}

  cleanup-crunchy:
    name: Cleanup Ephemeral Crunchy Data
    runs-on: ubuntu-24.04
    timeout-minutes: 10
    steps:
      # OC setup
      - uses: redhat-actions/openshift-tools-installer@v1
        with:
          oc: "4"

      # OC Login
      - run: |
          # OC Login
          oc login --token=${{ secrets.OC_TOKEN }} --server=${{ vars.OC_SERVER }}
          oc project ${{ secrets.OC_NAMESPACE }} # Safeguard!
      - run: |
          # check if postgres-crunchy exists or else exit
          oc get PostgresCluster/postgres-crunchy-dev || exit 0
          # Remove the user from the crunchy cluster yaml and apply the changes
          USER_TO_REMOVE='{"databases":["app-${{ github.event.number }}"],"name":"app-${{ github.event.number }}"}'

          echo 'getting current users from crunchy'
          CURRENT_USERS=$(oc get PostgresCluster/postgres-crunchy-dev -o json | jq '.spec.users')
          echo "${CURRENT_USERS}"

          # Remove the user from the list, 
          UPDATED_USERS=$(echo "$CURRENT_USERS" | jq --argjson user "$USER_TO_REMOVE" 'map(select(. != $user))')

          PATCH_JSON=$(jq -n --argjson users "$UPDATED_USERS" '{"spec": {"users": $users}}')
          oc patch PostgresCluster/postgres-crunchy-dev --type=merge -p "$PATCH_JSON"

          # get primary crunchy pod and remove the role and db
          CRUNCHY_PG_PRIMARY_POD_NAME=$(oc get pods -l postgres-operator.crunchydata.com/role=master -o json | jq -r '.items[0].metadata.name')

          echo "${CRUNCHY_PG_PRIMARY_POD_NAME}"
          # Terminate all connections to the database before trying terminate and Drop the databse and role right after

          oc exec -it "${CRUNCHY_PG_PRIMARY_POD_NAME}" -n ${{ secrets.OC_NAMESPACE }} -- bash -c "psql -U postgres -d postgres -c \"SELECT pg_terminate_backend(pg_stat_activity.pid) FROM pg_stat_activity WHERE pg_stat_activity.datname = 'app-${{ github.event.number }}' AND pid <> pg_backend_pid();\" && \psql -U postgres -d postgres -c \"DROP DATABASE \\\"app-${{ github.event.number }}\\\";\" && \psql -U postgres -d postgres -c \"DROP ROLE \\\"app-${{ github.event.number }}\\\";\""

          echo "Database and Role for PR is cleaned."

          exit 0

  ### Emerald Jobs ###
  cleanup-emerald:
    name: Cleanup Ephemeral Emerald Developer Environments
    runs-on: ubuntu-22.04
    steps:
      - name: Setup gitops repo access
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.MANIFEST_REPO_DEPLOY_KEY }}

      - name: Checkout CD repo
        uses: actions/checkout@v4
        with:
          repository: ${{ env.GITOPS_REPO }}
          ssh-key: ${{ secrets.MANIFEST_REPO_DEPLOY_KEY }}
          ref: ${{ env.GITOPS_REPO_BRANCH }}

      - name: Calculate Deployment Number
        id: get-deployment-number
        shell: bash
        run: |
          PR_NUMBER=$(echo ${{ github.event.number }})
          PR_NUMBER_MOD_TEN=$(($PR_NUMBER % 10))
          echo "DEPLOYMENT_NUMBER=$(($PR_NUMBER_MOD_TEN))" >> $GITHUB_OUTPUT

      - name: Configure git
        # From https://github.com/orgs/community/discussions/26560#discussioncomment-3531273
        run: |
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git config --global --add safe.directory "$GITHUB_WORKSPACE"

      - name: Include new infrastructure changes on merge
        # in addition to new infra changes, we also update the base image tag
        # so that our next test release will use the tag from this PR
        #
        # why do this instead of promoting the tag out of the PR? In the event we have 10+
        # PRs open after the last release merge, we could promote an invalid build #
        if: ${{ github.event.pull_request.merged == true }}
        run: |
          DEPLOYMENT_NUMBER=${{ steps.get-deployment-number.outputs.DEPLOYMENT_NUMBER }}
          VALUES_DIR="${{ env.GITOPS_REPO_VALUES_PATH }}" \
          OUTPUTS_DIR="${{ env.GITOPS_REPO_OUTPUTS_PATH }}" \
          ./.github/scripts/gitops.sh updatebase dev-$DEPLOYMENT_NUMBER

          VALUES_DIR="${{ env.GITOPS_REPO_VALUES_PATH }}" \
          OUTPUTS_DIR="${{ env.GITOPS_REPO_OUTPUTS_PATH }}" \
          ./.github/scripts/gitops.sh tag base ${{ github.event.number }}

      - name: Disable dev environment
        run: |
          DEPLOYMENT_NUMBER=${{ steps.get-deployment-number.outputs.DEPLOYMENT_NUMBER }}
          VALUES_DIR="${{ env.GITOPS_REPO_VALUES_PATH }}" \
          OUTPUTS_DIR="${{ env.GITOPS_REPO_OUTPUTS_PATH }}" \
          ./.github/scripts/gitops.sh disable dev-$DEPLOYMENT_NUMBER

      # We always run this to avoid deleting developer databases on commit pushes after a PR is opened
      # there is a small edge case where a cleanup could be interrupted by this if 2 PRs open closely together
      - name: Unset / No-op Crunchy development DB cleanup
        run: |
          ./.github/scripts/crunchy.sh u
    
      - name: Commit and push update
        run: |
          DEPLOYMENT_NUMBER=${{ steps.get-deployment-number.outputs.DEPLOYMENT_NUMBER }}
          ./.github/scripts/gitops.sh commitall "Disabling dev-$DEPLOYMENT_NUMBER for PR ${{ github.event.number }}"
          git push origin ${{ env.GITOPS_REPO_BRANCH }}