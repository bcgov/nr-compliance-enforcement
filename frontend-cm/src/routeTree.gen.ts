/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as UnauthorizedImport } from './routes/unauthorized'
import { Route as SearchImport } from './routes/search'
import { Route as ProtectedByRoleImport } from './routes/protected-by-role'
import { Route as ProtectedImport } from './routes/protected'
import { Route as AboutImport } from './routes/about'
import { Route as IndexImport } from './routes/index'
import { Route as PersonsIndexImport } from './routes/persons.index'
import { Route as InvestigationsIndexImport } from './routes/investigations.index'
import { Route as PersonsCreateImport } from './routes/persons.create'
import { Route as PersonsIdImport } from './routes/persons.$id'
import { Route as InvestigationsIdImport } from './routes/investigations.$id'
import { Route as PersonsIdEditImport } from './routes/persons_.$id.edit'
import { Route as InvestigationsIdEditImport } from './routes/investigations_.$id.edit'

// Create/Update Routes

const UnauthorizedRoute = UnauthorizedImport.update({
  id: '/unauthorized',
  path: '/unauthorized',
  getParentRoute: () => rootRoute,
} as any)

const SearchRoute = SearchImport.update({
  id: '/search',
  path: '/search',
  getParentRoute: () => rootRoute,
} as any)

const ProtectedByRoleRoute = ProtectedByRoleImport.update({
  id: '/protected-by-role',
  path: '/protected-by-role',
  getParentRoute: () => rootRoute,
} as any)

const ProtectedRoute = ProtectedImport.update({
  id: '/protected',
  path: '/protected',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const PersonsIndexRoute = PersonsIndexImport.update({
  id: '/persons/',
  path: '/persons/',
  getParentRoute: () => rootRoute,
} as any)

const InvestigationsIndexRoute = InvestigationsIndexImport.update({
  id: '/investigations/',
  path: '/investigations/',
  getParentRoute: () => rootRoute,
} as any)

const PersonsCreateRoute = PersonsCreateImport.update({
  id: '/persons/create',
  path: '/persons/create',
  getParentRoute: () => rootRoute,
} as any)

const PersonsIdRoute = PersonsIdImport.update({
  id: '/persons/$id',
  path: '/persons/$id',
  getParentRoute: () => rootRoute,
} as any)

const InvestigationsIdRoute = InvestigationsIdImport.update({
  id: '/investigations/$id',
  path: '/investigations/$id',
  getParentRoute: () => rootRoute,
} as any)

const PersonsIdEditRoute = PersonsIdEditImport.update({
  id: '/persons_/$id/edit',
  path: '/persons/$id/edit',
  getParentRoute: () => rootRoute,
} as any)

const InvestigationsIdEditRoute = InvestigationsIdEditImport.update({
  id: '/investigations_/$id/edit',
  path: '/investigations/$id/edit',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/protected': {
      id: '/protected'
      path: '/protected'
      fullPath: '/protected'
      preLoaderRoute: typeof ProtectedImport
      parentRoute: typeof rootRoute
    }
    '/protected-by-role': {
      id: '/protected-by-role'
      path: '/protected-by-role'
      fullPath: '/protected-by-role'
      preLoaderRoute: typeof ProtectedByRoleImport
      parentRoute: typeof rootRoute
    }
    '/search': {
      id: '/search'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof SearchImport
      parentRoute: typeof rootRoute
    }
    '/unauthorized': {
      id: '/unauthorized'
      path: '/unauthorized'
      fullPath: '/unauthorized'
      preLoaderRoute: typeof UnauthorizedImport
      parentRoute: typeof rootRoute
    }
    '/investigations/$id': {
      id: '/investigations/$id'
      path: '/investigations/$id'
      fullPath: '/investigations/$id'
      preLoaderRoute: typeof InvestigationsIdImport
      parentRoute: typeof rootRoute
    }
    '/persons/$id': {
      id: '/persons/$id'
      path: '/persons/$id'
      fullPath: '/persons/$id'
      preLoaderRoute: typeof PersonsIdImport
      parentRoute: typeof rootRoute
    }
    '/persons/create': {
      id: '/persons/create'
      path: '/persons/create'
      fullPath: '/persons/create'
      preLoaderRoute: typeof PersonsCreateImport
      parentRoute: typeof rootRoute
    }
    '/investigations/': {
      id: '/investigations/'
      path: '/investigations'
      fullPath: '/investigations'
      preLoaderRoute: typeof InvestigationsIndexImport
      parentRoute: typeof rootRoute
    }
    '/persons/': {
      id: '/persons/'
      path: '/persons'
      fullPath: '/persons'
      preLoaderRoute: typeof PersonsIndexImport
      parentRoute: typeof rootRoute
    }
    '/investigations_/$id/edit': {
      id: '/investigations_/$id/edit'
      path: '/investigations/$id/edit'
      fullPath: '/investigations/$id/edit'
      preLoaderRoute: typeof InvestigationsIdEditImport
      parentRoute: typeof rootRoute
    }
    '/persons_/$id/edit': {
      id: '/persons_/$id/edit'
      path: '/persons/$id/edit'
      fullPath: '/persons/$id/edit'
      preLoaderRoute: typeof PersonsIdEditImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/protected': typeof ProtectedRoute
  '/protected-by-role': typeof ProtectedByRoleRoute
  '/search': typeof SearchRoute
  '/unauthorized': typeof UnauthorizedRoute
  '/investigations/$id': typeof InvestigationsIdRoute
  '/persons/$id': typeof PersonsIdRoute
  '/persons/create': typeof PersonsCreateRoute
  '/investigations': typeof InvestigationsIndexRoute
  '/persons': typeof PersonsIndexRoute
  '/investigations/$id/edit': typeof InvestigationsIdEditRoute
  '/persons/$id/edit': typeof PersonsIdEditRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/protected': typeof ProtectedRoute
  '/protected-by-role': typeof ProtectedByRoleRoute
  '/search': typeof SearchRoute
  '/unauthorized': typeof UnauthorizedRoute
  '/investigations/$id': typeof InvestigationsIdRoute
  '/persons/$id': typeof PersonsIdRoute
  '/persons/create': typeof PersonsCreateRoute
  '/investigations': typeof InvestigationsIndexRoute
  '/persons': typeof PersonsIndexRoute
  '/investigations/$id/edit': typeof InvestigationsIdEditRoute
  '/persons/$id/edit': typeof PersonsIdEditRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/protected': typeof ProtectedRoute
  '/protected-by-role': typeof ProtectedByRoleRoute
  '/search': typeof SearchRoute
  '/unauthorized': typeof UnauthorizedRoute
  '/investigations/$id': typeof InvestigationsIdRoute
  '/persons/$id': typeof PersonsIdRoute
  '/persons/create': typeof PersonsCreateRoute
  '/investigations/': typeof InvestigationsIndexRoute
  '/persons/': typeof PersonsIndexRoute
  '/investigations_/$id/edit': typeof InvestigationsIdEditRoute
  '/persons_/$id/edit': typeof PersonsIdEditRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/protected'
    | '/protected-by-role'
    | '/search'
    | '/unauthorized'
    | '/investigations/$id'
    | '/persons/$id'
    | '/persons/create'
    | '/investigations'
    | '/persons'
    | '/investigations/$id/edit'
    | '/persons/$id/edit'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/protected'
    | '/protected-by-role'
    | '/search'
    | '/unauthorized'
    | '/investigations/$id'
    | '/persons/$id'
    | '/persons/create'
    | '/investigations'
    | '/persons'
    | '/investigations/$id/edit'
    | '/persons/$id/edit'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/protected'
    | '/protected-by-role'
    | '/search'
    | '/unauthorized'
    | '/investigations/$id'
    | '/persons/$id'
    | '/persons/create'
    | '/investigations/'
    | '/persons/'
    | '/investigations_/$id/edit'
    | '/persons_/$id/edit'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  ProtectedRoute: typeof ProtectedRoute
  ProtectedByRoleRoute: typeof ProtectedByRoleRoute
  SearchRoute: typeof SearchRoute
  UnauthorizedRoute: typeof UnauthorizedRoute
  InvestigationsIdRoute: typeof InvestigationsIdRoute
  PersonsIdRoute: typeof PersonsIdRoute
  PersonsCreateRoute: typeof PersonsCreateRoute
  InvestigationsIndexRoute: typeof InvestigationsIndexRoute
  PersonsIndexRoute: typeof PersonsIndexRoute
  InvestigationsIdEditRoute: typeof InvestigationsIdEditRoute
  PersonsIdEditRoute: typeof PersonsIdEditRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  ProtectedRoute: ProtectedRoute,
  ProtectedByRoleRoute: ProtectedByRoleRoute,
  SearchRoute: SearchRoute,
  UnauthorizedRoute: UnauthorizedRoute,
  InvestigationsIdRoute: InvestigationsIdRoute,
  PersonsIdRoute: PersonsIdRoute,
  PersonsCreateRoute: PersonsCreateRoute,
  InvestigationsIndexRoute: InvestigationsIndexRoute,
  PersonsIndexRoute: PersonsIndexRoute,
  InvestigationsIdEditRoute: InvestigationsIdEditRoute,
  PersonsIdEditRoute: PersonsIdEditRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/protected",
        "/protected-by-role",
        "/search",
        "/unauthorized",
        "/investigations/$id",
        "/persons/$id",
        "/persons/create",
        "/investigations/",
        "/persons/",
        "/investigations_/$id/edit",
        "/persons_/$id/edit"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/protected": {
      "filePath": "protected.tsx"
    },
    "/protected-by-role": {
      "filePath": "protected-by-role.tsx"
    },
    "/search": {
      "filePath": "search.tsx"
    },
    "/unauthorized": {
      "filePath": "unauthorized.tsx"
    },
    "/investigations/$id": {
      "filePath": "investigations.$id.tsx"
    },
    "/persons/$id": {
      "filePath": "persons.$id.tsx"
    },
    "/persons/create": {
      "filePath": "persons.create.tsx"
    },
    "/investigations/": {
      "filePath": "investigations.index.tsx"
    },
    "/persons/": {
      "filePath": "persons.index.tsx"
    },
    "/investigations_/$id/edit": {
      "filePath": "investigations_.$id.edit.tsx"
    },
    "/persons_/$id/edit": {
      "filePath": "persons_.$id.edit.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
