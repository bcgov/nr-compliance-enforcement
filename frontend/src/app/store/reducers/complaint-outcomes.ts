import { createAction, createSlice } from "@reduxjs/toolkit";
import { ComplaintOutcomesState } from "@/app/types/state/complaint-outcomes-state";
import { Assessment } from "@apptypes/outcomes/assessment";

const initialState: ComplaintOutcomesState = {
  complaintOutcomeGuid: undefined,
  assessments: [],
  preventions: [
    {
      date: undefined,
      officer: undefined,
      prevention_type: [],
    },
  ],
  isReviewRequired: false,
  reviewComplete: undefined,
  notes: [],
  equipment: [],
  subject: [],
  isInEdit: {
    assessment: false,
    prevention: false,
    equipment: false,
    animal: false,
    notes: false,
    attachments: false,
    fileReview: false,
    showSectionErrors: false,
    hideAssessmentErrors: false,
    //-- ceeb
    decision: false,
    authorization: false,
  },
  decision: undefined,
  authorization: undefined,
};

export const casesSlice = createSlice({
  name: "complaintOutcomes",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setComplaintOutcomeGuid: (state, action) => {
      const { payload } = action;
      return { ...state, complaintOutcomeGuid: payload };
    },
    setAssessments: (state, action) => {
      state.assessments = action.payload;
    },
    setPreventions: (state, action) => {
      state.preventions = action.payload;
    },
    setIsReviewedRequired: (state, action) => {
      const { payload } = action;
      return { ...state, isReviewRequired: payload };
    },
    setReviewComplete: (state, action) => {
      const { payload } = action;
      return { ...state, reviewComplete: payload };
    },
    clearAssessment: (state) => {
      state.assessments = [] as Assessment[];
    },
    clearPrevention: (state) => {
      state.preventions = { ...initialState.preventions };
    },
    setCaseFile: (state, action) => {
      const {
        payload: { complaintOutcomeGuid, notes, equipment, subject, reviewComplete, decision, authorization },
      } = action;

      //--
      //-- TODO: need to have each dev add thier state to this section instead of requesting
      //-- each individual state. Add assessment, prevention, equipment here
      return {
        ...state,
        complaintOutcomeGuid,
        notes,
        equipment,
        subject,
        reviewComplete,
        decision,
        authorization,
      };
    },
    setIsInEdit: (state, action) => {
      const { payload } = action;
      return {
        ...state,
        isInEdit: { ...state.isInEdit, ...payload, hideAssessmentErrors: payload.hideAssessmentErrors || false },
      };
    },
  },

  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder.addCase(resetCases, (state) => {
      return initialState;
    });
  },
});

// export the actions/reducers
export const {
  setAssessments,
  setPreventions,
  setComplaintOutcomeGuid,
  setIsReviewedRequired,
  setReviewComplete,
  setCaseFile,
  setIsInEdit,
  clearAssessment,
  clearPrevention,
} = casesSlice.actions;

export const resetPreventions = createAction("prevention/reset");
export const resetCases = createAction("cases/reset");
export default casesSlice.reducer;
