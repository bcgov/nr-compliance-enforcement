import { Assessment } from "../../../types/outcomes/assessment";
import { AssessmentState } from "../../../types/state/assessment-state";
import { AppThunk, RootState } from "../../store";
import { createAction, createSlice } from "@reduxjs/toolkit";
import config from "../../../../config";
import { generateApiParameters, get } from "../../../common/api";

const initialState: AssessmentState = {
  assessment: {
    action_required: undefined,
    date: undefined,
    justification: undefined,
    officer: undefined,
    assessment_type: []
  }
};

export const assessmentSlice = createSlice({
  name: "assessment",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setAssessment: (state, action) => {
      const { payload } = action;
      const assessment: Assessment = payload.assessment;
      return { ...state, assessment };
    },
  },

  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder.addCase(resetAssessment, (state) => {
      return initialState;
    });
  },  
});

// export the actions/reducers
export const { setAssessment } = assessmentSlice.actions;

export const selectAssessment = (state: RootState): Assessment => {
  return state.assessment.assessment;
};

export const resetAssessment = createAction('assessment/reset');

// Given a compaint id, returns the assessment
export const getAssessment =
  (complaint_identifier?: string): AppThunk =>
  async (dispatch) => {
    const parameters = generateApiParameters(
      `${config.API_BASE_URL}/v1/case/${complaint_identifier}`
    );
    const response = await get<Assessment>(dispatch, parameters);

    if (response) {
      dispatch(
        setAssessment({
          assessment: response,
        })
      );
    }
  };


export default assessmentSlice.reducer;
