import { Office } from "../../types/office/office";
import { OfficeState } from "../../types/office/offices-in-zone-state";
import { AppThunk, RootState } from "../store";
import { createSlice } from "@reduxjs/toolkit";
import config from "../../../config";
import { generateApiParameters, get } from "../../common/api";
import { from } from "linq-to-typescript";
import { OfficeAssignment } from "../../types/app/office/office-assignment";
import { DropdownOption } from "../../types/app/drop-down-option";

const initialState: OfficeState = {
  officesInZone: [],
  officeAssignments: [],
};

export const officeSlice = createSlice({
  name: "offices",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setOfficesInZone: (state, action) => {
      const { payload } = action;
      const officesInZone: Office[] = payload.officesInZone;
      return { ...state, officesInZone };
    },
    setOfficeAssignments: (state, action) => {
      const { payload } = action;
      const officeAssignments: Array<OfficeAssignment> =
        payload.officeAssignments;
      return { ...state, officeAssignments };
    },
  },

  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {},
});

// export the actions/reducers
export const { setOfficesInZone, setOfficeAssignments } = officeSlice.actions;

// Given a zone, returns a list of persons in that zone.
export const getOfficesInZone =
  (zone?: string): AppThunk =>
  async (dispatch) => {
    const parameters = generateApiParameters(
      `${config.API_BASE_URL}/v1/office/by-zone/${zone}`
    );
    const response = await get<Array<Office>>(dispatch, parameters);

    if (response && from(response).any()) {
      dispatch(
        setOfficesInZone({
          officesInZone: response,
        })
      );
    }
  };


export const fetchOfficeAssignments = (): AppThunk => async (dispatch) => {
  let parameters = generateApiParameters(
    `${config.API_BASE_URL}/v1/office/by-zone/BLKYCSR`
  );
  let response = await get<Array<Office>>(dispatch, parameters);

  parameters = generateApiParameters(
    `${config.API_BASE_URL}/v1/office/offices-by-agency/`
  );
debugger
  response = await get<Array<any>>(dispatch, parameters);
  if (response && from(response).any()) {
    const payload = {
      response,
    };
    dispatch(setOfficeAssignments(payload));
  }
};

export const selectOfficesForAssignmentDropdown = (
  state: RootState
): Array<DropdownOption> => {
  const {
    offices: { officeAssignments },
  } = state;

  const data = officeAssignments.map((item) => {
    const { id, name, agency } = item;
    const record: DropdownOption = { label: `${agency} - ${name}`, value: id };

    return record;
  });

  return data;
};

export default officeSlice.reducer;
