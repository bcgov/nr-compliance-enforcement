import { createSlice } from "@reduxjs/toolkit";
import { RootState, AppThunk } from "../store";
import config from "../../../config";
import axios from "axios";
import { AssignOfficersState } from "../../types/complaints/officers-in-zone-state";
import { Person } from "../../types/person/person";
import { UUID } from "crypto";
import { PersonComplaintXref } from "../../types/personComplaintXref";
import { setHwcrComplaints } from "./hwcr-complaints";
import ComplaintType from "../../constants/complaint-types";
import { setAllegationComplaints } from "./allegation-complaint";

const initialState: AssignOfficersState = {
    officersInZone: []
};

export const assignOfficersSlice = createSlice({
  name: "assignOfficers",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setOfficersInZone: (state, action) => {
      const { payload } = action;
      const officersInZone:Person[] = payload.officersInZone;
      return { ...state, officersInZone};
    },
  },

  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {},
});

// export the actions/reducers
export const { setOfficersInZone } = assignOfficersSlice.actions;

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched
export const getOfficersInZone = (userGuid: UUID): AppThunk => async (dispatch) => {

  const token = localStorage.getItem("user");
  if (token) {
    axios.defaults.headers.common.Authorization = `Bearer ${token}`;
    
    // find an officer based on the logged in user's guid.  This is used to determine the user's office, which will eventually
    // be used to find the officers in the user's office
    const officerResponse = await axios.get(`${config.API_BASE_URL}/v1/officer/find-by-auth-user-guid/${userGuid}`);
    const currentUserOffice = officerResponse.data.office_guid.office_guid;

    const response = await axios.get(`${config.API_BASE_URL}/v1/officer/find-by-office/${currentUserOffice}`);
    dispatch(
        setOfficersInZone({
        officersInZone: response.data
      })
    );
  }
};

// Assigns the current user to an office
export const assigneCurrentUserToComplaint = (userGuid: UUID, complaint_identifier: string, complaint_type: number): AppThunk => async (dispatch) => {
  const token = localStorage.getItem("user");
  if (token) {
    axios.defaults.headers.common.Authorization = `Bearer ${token}`;
    const officerResponse = await axios.get(`${config.API_BASE_URL}/v1/officer/find-by-auth-user-guid/${userGuid}`);
    dispatch(updateComplaintAssignee(officerResponse.data.person_guid.person_guid, complaint_identifier, complaint_type));
  }
}

// creates a new cross reference for a person and office.  Assigns a person to an office.
export const updateComplaintAssignee = (person_guid: UUID, complaint_identifier: string, complaint_type: number): AppThunk => async (dispatch) => {
  alert(person_guid);
  const token = localStorage.getItem("user");
  if (token) {
    axios.defaults.headers.common.Authorization = `Bearer ${token}`;
    
    // find an active person assigned to the complaint (if there is one)
    const personComplaintXrefGuidResponse = await axios.get<PersonComplaintXref[]>(`${config.API_BASE_URL}/v1/person-complaint-xref/find-by-complaint/${complaint_identifier}`);
    if (personComplaintXrefGuidResponse.data.length > 0) {
      // If there's an active person assigned to a complaint, update it to set it to inactive since we're going to assign someone else to it
      const personComplaintXrefGuid = personComplaintXrefGuidResponse.data[0].personComplaintXrefGuid;
      let data = 
        {
          "active_ind": false
        }; 

      // set person complaint xref to inactive
      await axios.patch<PersonComplaintXref>(`${config.API_BASE_URL}/v1/person-complaint-xref/${personComplaintXrefGuid}`,data);
    }
    let newRecord = 
      {
            "active_ind": true,
            "person_guid": {
                "person_guid": person_guid
            },
            "complaint_identifier": complaint_identifier,
            "person_complaint_xref_code": "ASSIGNEE",
            "create_user_id": "bfalk",
      };
    console.log(newRecord);

    // add new person complaint record
    await axios.post<PersonComplaintXref>(`${config.API_BASE_URL}/v1/person-complaint-xref/`,newRecord);

    // refresh complaints.  Note we should just update the changed record instead of the entire list of complaints
    if (ComplaintType.HWCR_COMPLAINT === complaint_type) {
      const response = await axios.get(`${config.API_BASE_URL}/v1/hwcr-complaint`, { params: { sortColumn: 'incident_reported_datetime', sortOrder: 'DESC'}});
      dispatch(
        setHwcrComplaints({
          hwcrComplaints: response.data
        })
      );
    } else {
      const response = await axios.get(`${config.API_BASE_URL}/v1/allegation-complaint`, { params: { sortColumn: 'incident_reported_datetime', sortOrder: 'DESC'}});
      dispatch(
        setAllegationComplaints({
          allegationComplaints: response.data
        })
      );
    }
  }
}

export const officersInZone = (state: RootState) => { 
  const { officersInZone } = state.officersInZone;
  return officersInZone;
}

export default assignOfficersSlice.reducer;