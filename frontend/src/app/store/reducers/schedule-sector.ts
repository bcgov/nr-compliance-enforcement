import { Action, createSlice, ThunkAction } from "@reduxjs/toolkit";
import { RootState, AppThunk } from "../store";
import config from "../../../config";
import { ScheduleSector } from "../../types/app/schedule-sector";
import { ScheduleSectorState } from "../../types/state/schedule-sector-state";

import { generateApiParameters, get, patch, post } from "../../common/api";
import { from } from "linq-to-typescript";
import { AUTH_TOKEN } from "../../service/user-service";

const initialState: ScheduleSectorState = {
  scheduleSectors: [],
};

export const scheduleSectorSlice = createSlice({
  name: "scheduleSectors",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setScheduleSectors: (state, action) => {
      const {
        payload: { scheduleSectors },
      } = action;
      return { ...state, scheduleSectors };
    },
  },

  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {},
});

// export the actions/reducers
export const { setScheduleSectors } = scheduleSectorSlice.actions;

// Get list of the officers and update store
export const getScheduleSectors =
  (zone?: string): AppThunk =>
  async (dispatch) => {
    try {
      const parameters = generateApiParameters(`${config.API_BASE_URL}/v1/schedule-sector-xref`);
      const response = await get<Array<ScheduleSector>>(dispatch, parameters);
      if (response && from(response).any()) {
        dispatch(
          setScheduleSectors({
            scheduleSectors: response,
          }),
        );
      }
    } catch (error) {
      //-- handle errors
    }
  };

export default scheduleSectorSlice.reducer;
