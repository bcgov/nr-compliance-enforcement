import { createSlice } from "@reduxjs/toolkit";
import { RootState, AppThunk } from "../store";
import { Officer } from "../../types/person/person";
import { generateApiParameters, get } from "../../common/api";
import { from } from "linq-to-typescript";
import { COMSObject } from "../../types/coms/object";
import { AttachmentsState } from "../../types/state/attachments-state";
import config from "../../../config";


const initialState: AttachmentsState = {
    attachments: [],
};

export const attachmentsSlice = createSlice({
  name: "attachments",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setAttachments: (state, action) => {
      const {
        payload: { attachments },
      } = action;
      return { ...state, attachments };
    },
  },

  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {},
});

// export the actions/reducers
export const { setAttachments } = attachmentsSlice.actions;

// Get list of the officers and update store
export const getAttachments  = (complaint_identifier: string): AppThunk => async (dispatch) => {
    try {
      const parameters = generateApiParameters(
        `${config.COMS_URL}/object?bucketId=${config.COMS_BUCKET}`
      );
      const response = await get<Array<Officer>>(dispatch, parameters,{'x-amz-meta-complaint-id':complaint_identifier});
      if (response && from(response).any()) {
        dispatch(
          setAttachments({
            attachments: response,
          }),
        );
      }
    } catch (error) {
      //-- handle errors
    }
  };

//-- selectors

export const selectAttachments = (state: RootState): COMSObject[] | null => {
  const { attachments: attachmentsRoot } = state;
  const { attachments } = attachmentsRoot;

  return attachments ?? null;
};


export default attachmentsSlice.reducer;
