import { PayloadAction, createSlice } from "@reduxjs/toolkit";
import { AppThunk, RootState, store } from "../store";
import axios from "axios";
import { from } from "linq-to-typescript";
import config from "../../../config";
import { CodeTableState } from "../../types/state/code-table-state";
import { AgencyCode } from "../../types/code-tables/agency-code";
import { CodeTable } from "../../types/code-tables/code-table";
import { ComplaintStatusCode } from "../../types/code-tables/complaint-status-code";
import { ViolationCode } from "../../types/code-tables/violation-code";
import { SpeciesCode } from "../../types/code-tables/species-code";
import { HwcrNatureOfComplaintCode } from "../../types/code-tables/hwcr-nature-of-complaint-code";
import { CosGeoOrgUnit } from "../../types/person/person";
import { AttractantCode } from "../../types/code-tables/attractant-code";
import { DropdownOption } from "../../types/code-tables/option";

const initialState: CodeTableState = {
  agencyCodes: [],
  complaintStatusCodes: [],
  violationCodes: [],
  speciesCodes: [],
  wildlifeNatureOfComplaintCodes: [],
  areaCodes: [],
  attractantCodes: [],
};

export const codeTableSlice = createSlice({
  name: "code-table",
  initialState,

  reducers: {
    setAgencyCodes: (
      state: CodeTableState,
      action: PayloadAction<Array<AgencyCode>>
    ) => {
      const { payload } = action;
      const data = payload.map(
        ({
          agency_code: value,
          long_description: label,
          short_description: description,
        }) => {
          return { value, label, description } as CodeTable;
        }
      );
      return { ...state, agencyCodes: data };
    },
    setComplaintStatusCodes: (
      state: CodeTableState,
      action: PayloadAction<Array<ComplaintStatusCode>>
    ) => {
      const { payload } = action;
      const data = payload.map(
        ({
          complaint_status_code: value,
          long_description: label,
          short_description: description,
        }) => {
          return { value, label, description } as CodeTable;
        }
      );
      return { ...state, complaintStatusCodes: data };
    },
    setViolationCodes: (
      state: CodeTableState,
      action: PayloadAction<Array<ViolationCode>>
    ) => {
      const { payload } = action;
      const data = payload.map(
        ({
          violation_code: value,
          long_description: label,
          short_description: description,
        }) => {
          return { value, label, description } as CodeTable;
        }
      );
      return { ...state, violationCodes: data };
    },
    setSpeciesCodes: (
      state: CodeTableState,
      action: PayloadAction<Array<SpeciesCode>>
    ) => {
      const { payload } = action;
      const data = payload.map(
        ({
          species_code: value,
          long_description: label,
          short_description: description,
        }) => {
          return { value, label, description } as CodeTable;
        }
      );
      return { ...state, speciesCodes: data };
    },
    setWildlifeNatureOfComplaintCodes: (
      state: CodeTableState,
      action: PayloadAction<Array<HwcrNatureOfComplaintCode>>
    ) => {
      const { payload } = action;
      const data = payload.map(
        ({
          hwcr_complaint_nature_code: value,
          long_description: label,
          short_description: description,
        }) => {
          return { value, label, description } as CodeTable;
        }
      );
      return { ...state, wildlifeNatureOfComplaintCodes: data };
    },
    setAreaCodes: (
      state: CodeTableState,
      action: PayloadAction<Array<CosGeoOrgUnit>>
    ) => {
      const { payload } = action;
      const data = payload.map(({ area_code: value, area_name: label }) => {
        return { value, label, description: label } as CodeTable;
      });
      return { ...state, areaCodes: data };
    },
    setAttractantCodes: (
      state: CodeTableState,
      action: PayloadAction<Array<AttractantCode>>
    ) => {
      const { payload } = action;
      const data = payload.map(
        ({
          attractant_code: value,
          long_description: label,
          short_description: description,
        }) => {
          return { value, label, description } as CodeTable;
        }
      );
      return { ...state, attractantCodes: data };
    },
  },

  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {},
});

export const {
  setAgencyCodes,
  setComplaintStatusCodes,
  setViolationCodes,
  setSpeciesCodes,
  setWildlifeNatureOfComplaintCodes,
  setAreaCodes,
  setAttractantCodes,
} = codeTableSlice.actions;

export const fetchCodeTables = (): AppThunk => async (dispatch) => {
  const state = store.getState();
  const {
    codeTables: {
      agencyCodes,
      complaintStatusCodes,
      violationCodes,
      speciesCodes,
      wildlifeNatureOfComplaintCodes,
      areaCodes,
      attractantCodes,
    },
  } = state;

  if (!from(agencyCodes).any()) {
    dispatch(fetchAgencyCodes());
  }

  if (!from(complaintStatusCodes).any()) {
    dispatch(fetchComplaintStatusCodes());
  }

  if (!from(violationCodes).any()) {
    dispatch(fetchViolationCodes());
  }

  if (!from(speciesCodes).any()) {
    dispatch(fetchSpeciesCodes());
  }

  if (!from(wildlifeNatureOfComplaintCodes).any()) {
    dispatch(fetchWildlifeNatureOfComplaintCodes());
  }

  if (!from(areaCodes).any()) {
    dispatch(fetchAreaCodes());
  }

  if (!from(attractantCodes).any()) {
    dispatch(fetchAttractantCodes());
  }
};

export const fetchAgencyCodes = (): AppThunk => async (dispatch) => {
  const token = localStorage.getItem("user");

  if (token) {
    axios.defaults.headers.common.Authorization = `Bearer ${token}`;

    const response = await axios.get(`${config.API_BASE_URL}/v1/agency-code`);
    const result = response.data;

    dispatch(setAgencyCodes(result));
  }
};

export const fetchViolationCodes = (): AppThunk => async (dispatch) => {
  const token = localStorage.getItem("user");

  if (token) {
    axios.defaults.headers.common.Authorization = `Bearer ${token}`;

    const response = await axios.get(
      `${config.API_BASE_URL}/v1/violation-code`
    );
    const result = response.data;

    dispatch(setViolationCodes(result));
  }
};

export const fetchSpeciesCodes = (): AppThunk => async (dispatch) => {
  const token = localStorage.getItem("user");

  if (token) {
    axios.defaults.headers.common.Authorization = `Bearer ${token}`;

    const response = await axios.get(`${config.API_BASE_URL}/v1/species-code`);
    const result = response.data;

    dispatch(setSpeciesCodes(result));
  }
};

export const fetchWildlifeNatureOfComplaintCodes =
  (): AppThunk => async (dispatch) => {
    const token = localStorage.getItem("user");

    if (token) {
      axios.defaults.headers.common.Authorization = `Bearer ${token}`;

      const response = await axios.get(
        `${config.API_BASE_URL}/v1/hwcr-complaint-nature-code`
      );
      const result = response.data;

      dispatch(setWildlifeNatureOfComplaintCodes(result));
    }
  };
export const fetchComplaintStatusCodes = (): AppThunk => async (dispatch) => {
  const token = localStorage.getItem("user");

  if (token) {
    axios.defaults.headers.common.Authorization = `Bearer ${token}`;

    const response = await axios.get(
      `${config.API_BASE_URL}/v1/complaint-status-code`
    );
    const result = response.data;

    dispatch(setComplaintStatusCodes(result));
  }
};

export const fetchAreaCodes = (): AppThunk => async (dispatch) => {
  const token = localStorage.getItem("user");

  if (token) {
    axios.defaults.headers.common.Authorization = `Bearer ${token}`;

    const response = await axios.get(
      `${config.API_BASE_URL}/v1/cos-geo-org-unit`
    );
    const result = response.data;

    dispatch(setAreaCodes(result));
  }
};
export const fetchAttractantCodes = (): AppThunk => async (dispatch) => {
  const token = localStorage.getItem("user");

  if (token) {
    axios.defaults.headers.common.Authorization = `Bearer ${token}`;

    const response = await axios.get(
      `${config.API_BASE_URL}/v1/attractant-code`
    );
    const result = response.data;

    dispatch(setAttractantCodes(result));
  }
};

export const selectAgencyCodes = (state: RootState): Array<CodeTable> => {
    const { codeTables: { agencyCodes } } = state
    return agencyCodes
}

export const selectAgencyDropdown = (state: RootState): Array<DropdownOption> => { 
    const { codeTables: { agencyCodes } } = state
    return agencyCodes as Array<DropdownOption>
}

export const selectComplaintStatusCodes = (state: RootState): Array<CodeTable> => {
    const { codeTables: { complaintStatusCodes } } = state
    return complaintStatusCodes
}

export const selectComplaintStatusCodeDropdown = (state: RootState): Array<DropdownOption> => {
    const { codeTables: { complaintStatusCodes } } = state
    return complaintStatusCodes
}

export const selectSpeciesCodes = (state: RootState): Array<CodeTable> => {
    const { codeTables: { speciesCodes } } = state
    return speciesCodes
};
export const selectSpeciesCodeDropdown = (state: RootState): Array<DropdownOption> => {
    const { codeTables: { speciesCodes } } = state
    return speciesCodes
}

export const selectViolationCodes = (state: RootState): Array<CodeTable> => {
    const { codeTables: { violationCodes } } = state
    return violationCodes
}
export const selectViolationCodeDropdown = (state: RootState): Array<DropdownOption> => {
    const { codeTables: { violationCodes } } = state
    return violationCodes
}

export const selectedHwcrNatureOfComplaintCodes = (state: RootState): Array<CodeTable> => {
    const { codeTables: { wildlifeNatureOfComplaintCodes } } = state
    return wildlifeNatureOfComplaintCodes
}
export const selectedHwcrNatureOfComplaintCodeDropdown = (state: RootState): Array<DropdownOption> => {
    const { codeTables: { wildlifeNatureOfComplaintCodes } } = state
    return wildlifeNatureOfComplaintCodes
}

export const selectedAreaCodes = (state: RootState): Array<CodeTable> => { 
    const { codeTables: { areaCodes } } = state
    return areaCodes
}
export const selectedAreaCodeDropdown = (state: RootState): Array<DropdownOption> => {
    const { codeTables: { areaCodes } } = state
    return areaCodes
}

export const selectedAttractantCodes = (state: RootState): Array<CodeTable> => {
    const { codeTables: { attractantCodes } } = state
    return attractantCodes
}
export const selectedAttractantCodeDropdown = (state: RootState): Array<DropdownOption> => {
    const { codeTables: { attractantCodes } } = state
    return attractantCodes
}

export default codeTableSlice.reducer;
