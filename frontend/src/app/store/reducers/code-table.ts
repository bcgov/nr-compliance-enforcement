import { PayloadAction, createSlice } from "@reduxjs/toolkit";
import { AppThunk, RootState, store } from "../store";
import { from } from "linq-to-typescript";
import config from "../../../config";
import { CodeTableState } from "../../types/state/code-table-state";
import { CodeTable } from "../../types/code-tables/code-table";
import { ComplaintStatusCode } from "../../types/code-tables/complaint-status-code";
import { CosGeoOrgUnit } from "../../types/person/person";
import Option from "../../types/app/option";
import { generateApiParameters, get } from "../../common/api";
import { GeoOrganizationCode } from "../../types/code-tables/geo-orginaization-code";
import { DropdownOption } from "../../types/code-tables/option";
import { Agency } from "../../types/app/code-tables/agency";
import { Attractant } from "../../types/app/code-tables/attactant";
import { CODE_TABLE_TYPES } from "../../constants/code-table-types";
import { NatureOfComplaint } from "../../types/app/code-tables/nature-of-complaint";
import { Species } from "../../types/app/code-tables/species";
import { Violation } from "../../types/app/code-tables/violation";
import { ComplaintType } from "../../types/app/code-tables/complaint-type";

const initialState: CodeTableState = {
  agencyCodes: [],
  attractantCodes: [],
  complaintStatusCodes: [],
  complaintTypeCodes: [],
  wildlifeNatureOfComplaintCodes: [],
  violationCodes: [],
  speciesCodes: [],
  areaCodes: [],
  regions: [],
  zones: [],
  communities: [],

  agency: [],
  attractants: [],
  "complaint-status": [],
  "complaint-type": [],
  "nature-of-complaint": [],
  species: [],
  violation: [],
};

export const codeTableSlice = createSlice({
  name: "code-table",
  initialState,

  reducers: {
    setCodeTable: (
      state: CodeTableState,
      action: PayloadAction<{ key: string; data: Array<any> }>
    ) => {
      const {
        payload: { key, data },
      } = action;
      return { ...state, [key]: data };
    },

    setAreaCodes: (
      state: CodeTableState,
      action: PayloadAction<Array<CosGeoOrgUnit>>
    ) => {
      const { payload } = action;
      const data = payload.map(({ area_code: value, area_name: label }) => {
        return { value, label, description: label } as CodeTable;
      });
      return { ...state, areaCodes: data };
    },
    setRegions: (
      state: CodeTableState,
      action: PayloadAction<Array<GeoOrganizationCode>>
    ) => {
      const { payload } = action;
      const data = payload.map(
        ({
          geo_organization_unit_code: value,
          long_description: label,
          short_description: description,
        }) => {
          return { value, label, description } as CodeTable;
        }
      );
      return { ...state, regions: data };
    },
    setZones: (
      state: CodeTableState,
      action: PayloadAction<Array<GeoOrganizationCode>>
    ) => {
      const { payload } = action;
      const data = payload.map(
        ({
          geo_organization_unit_code: value,
          long_description: label,
          short_description: description,
        }) => {
          return { value, label, description } as CodeTable;
        }
      );
      return { ...state, zones: data };
    },
    setCommunities: (
      state: CodeTableState,
      action: PayloadAction<Array<GeoOrganizationCode>>
    ) => {
      const { payload } = action;
      const data = payload.map(
        ({
          geo_organization_unit_code: value,
          long_description: label,
          short_description: description,
        }) => {
          return { value, label, description } as CodeTable;
        }
      );
      return { ...state, communities: data };
    },
  },

  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {},
});

export const {
  setCodeTable,
  setAreaCodes,
  setRegions,
  setZones,
  setCommunities,
} = codeTableSlice.actions;

export const fetchCodeTables = (): AppThunk => async (dispatch) => {
  const state = store.getState();
  const {
    codeTables: {
      agencyCodes,
      violationCodes,
      speciesCodes,
      wildlifeNatureOfComplaintCodes,
      areaCodes,
      attractantCodes,
      regions,
      zones,
      communities,
      complaintTypeCodes,

      "complaint-status": complaintStatus,
    },
  } = state;

  try {
    if (!from(agencyCodes).any()) {
      dispatch(fetchAgencies());
    }

    if (!from(complaintStatus).any()) {
      dispatch(fetchComplaintStatus());
    }

    if (!from(violationCodes).any()) {
      dispatch(fetchViolations());
    }

    if (!from(speciesCodes).any()) {
      dispatch(fetchSpecies());
    }

    if (!from(wildlifeNatureOfComplaintCodes).any()) {
      dispatch(fetchNatureOfComplaints());
    }

    if (!from(areaCodes).any()) {
      dispatch(fetchAreaCodes());
    }

    if (!from(attractantCodes).any()) {
      dispatch(fetchAttractants());
    }

    if (!from(regions).any()) {
      dispatch(fetchRegions());
    }

    if (!from(zones).any()) {
      dispatch(fetchZones());
    }

    if (!from(communities).any()) {
      dispatch(fetchCommunities());
    }

    if (!from(complaintTypeCodes).any()) {
      dispatch(fetchComplaintTypeCodes());
    }
  } catch (error) {}
};

export const fetchAgencies = (): AppThunk => async (dispatch) => {
  const parameters = generateApiParameters(
    `${config.API_BASE_URL}/v1/code-table/${CODE_TABLE_TYPES.AGENCY}`
  );
  const response = await get<Array<Agency>>(dispatch, parameters);

  if (response && from(response).any()) {
    const payload = { key: CODE_TABLE_TYPES.AGENCY, data: response };
    dispatch(setCodeTable(payload));
  }
};

export const fetchAttractants = (): AppThunk => async (dispatch) => {
  const parameters = generateApiParameters(
    `${config.API_BASE_URL}/v1/code-table/${CODE_TABLE_TYPES.ATTRACTANT}`
  );
  const response = await get<Array<Attractant>>(dispatch, parameters);

  if (response && from(response).any()) {
    const payload = { key: CODE_TABLE_TYPES.ATTRACTANT, data: response };
    dispatch(setCodeTable(payload));
  }
};

export const fetchComplaintStatus = (): AppThunk => async (dispatch) => {
  const parameters = generateApiParameters(
    `${config.API_BASE_URL}/v1/code-table/${CODE_TABLE_TYPES.COMPLAINT_STATUS}`
  );
  const response = await get<Array<ComplaintStatusCode>>(dispatch, parameters);

  if (response && from(response).any()) {
    const payload = { key: CODE_TABLE_TYPES.COMPLAINT_STATUS, data: response };
    dispatch(setCodeTable(payload));
  }
};

export const fetchNatureOfComplaints = (): AppThunk => async (dispatch) => {
  const parameters = generateApiParameters(
    `${config.API_BASE_URL}/v1/code-table/${CODE_TABLE_TYPES.NATURE_OF_COMPLAINT}`
  );
  const response = await get<Array<NatureOfComplaint>>(dispatch, parameters);

  if (response && from(response).any()) {
    const payload = {
      key: CODE_TABLE_TYPES.NATURE_OF_COMPLAINT,
      data: response,
    };
    dispatch(setCodeTable(payload));
  }
};

export const fetchSpecies = (): AppThunk => async (dispatch) => {
  const parameters = generateApiParameters(
    `${config.API_BASE_URL}/v1/code-table/${CODE_TABLE_TYPES.SPECIES}`
  );
  const response = await get<Array<Species>>(dispatch, parameters);

  if (response && from(response).any()) {
    const payload = {
      key: CODE_TABLE_TYPES.SPECIES,
      data: response,
    };
    dispatch(setCodeTable(payload));
  }
};

export const fetchViolations = (): AppThunk => async (dispatch) => {
  const parameters = generateApiParameters(
    `${config.API_BASE_URL}/v1/code-table/${CODE_TABLE_TYPES.VIOLATIONS}`
  );
  const response = await get<Array<Violation>>(dispatch, parameters);

  if (response && from(response).any()) {
    const payload = {
      key: CODE_TABLE_TYPES.VIOLATIONS,
      data: response,
    };
    dispatch(setCodeTable(payload));
  }
};

export const fetchComplaintTypeCodes = (): AppThunk => async (dispatch) => {
  const parameters = generateApiParameters(
    `${config.API_BASE_URL}/v1/code-table/${CODE_TABLE_TYPES.COMPLAINT_TYPE}`
  );
  const response = await get<Array<ComplaintType>>(dispatch, parameters);

  if (response && from(response).any()) {
    const payload = {
      key: CODE_TABLE_TYPES.COMPLAINT_TYPE,
      data: response,
    };
    dispatch(setCodeTable(payload));
  }
};

//-- these are going to need to come from the organizations
export const fetchAreaCodes = (): AppThunk => async (dispatch) => {
  const parameters = generateApiParameters(
    `${config.API_BASE_URL}/v1/cos-geo-org-unit`
  );
  const response = await get<Array<CosGeoOrgUnit>>(dispatch, parameters);

  if (response && from(response).any()) {
    dispatch(setAreaCodes(response));
  }
};

export const fetchRegions = (): AppThunk => async (dispatch) => {
  const parameters = generateApiParameters(
    `${config.API_BASE_URL}/v1/geo-organization-unit-code/find-all-regions`
  );
  const response = await get<Array<GeoOrganizationCode>>(dispatch, parameters);

  if (response && from(response).any()) {
    dispatch(setRegions(response));
  }
};

export const fetchZones = (): AppThunk => async (dispatch) => {
  const parameters = generateApiParameters(
    `${config.API_BASE_URL}/v1/geo-organization-unit-code/find-all-zones`
  );
  const response = await get<Array<GeoOrganizationCode>>(dispatch, parameters);

  if (response && from(response).any()) {
    dispatch(setZones(response));
  }
};

export const fetchCommunities = (): AppThunk => async (dispatch) => {
  const parameters = generateApiParameters(
    `${config.API_BASE_URL}/v1/geo-organization-unit-code/find-all-areas`
  );
  const response = await get<Array<GeoOrganizationCode>>(dispatch, parameters);

  if (response && from(response).any()) {
    dispatch(setCommunities(response));
  }
};

export const selectCodeTable =
  (table: string) =>
  (state: RootState): Array<any> => {
    const { codeTables } = state;
    const selected = codeTables[table as keyof CodeTableState];

    return selected;
  };

export const selectSortedCodeTable =
  (table: string, sortBy: string) =>
  (state: RootState): Array<any> => {
    const { codeTables } = state;
    const data = codeTables[table as keyof CodeTableState];

    let sorted = data.sort((a: any, b: any) =>
      a[sortBy].localeCompare(b[sortBy])
    );

    return sorted;
  };

export const selectComplaintTypeDropdown = (
  state: RootState
): Array<Option> => {
  const {
    codeTables: { complaintTypeCodes },
  } = state;
  return complaintTypeCodes as Array<Option>;
};

export const selectAgencyDropdown = (state: RootState): Array<Option> => {
  const {
    codeTables: { agencyCodes },
  } = state;
  return agencyCodes as Array<Option>;
};

export const selectComplaintStatusCodeDropdown = (
  state: RootState
): Array<Option> => {
  const {
    codeTables: { complaintStatusCodes },
  } = state;
  return complaintStatusCodes;
};

export const selectSpeciesCodeDropdown = (state: RootState): Array<Option> => {
  const {
    codeTables: { speciesCodes },
  } = state;
  return speciesCodes;
};

export const selectViolationCodeDropdown = (
  state: RootState
): Array<Option> => {
  const {
    codeTables: { violationCodes },
  } = state;
  return violationCodes;
};

export const selectHwcrNatureOfComplaintCodeDropdown = (
  state: RootState
): Array<Option> => {
  const {
    codeTables: { wildlifeNatureOfComplaintCodes },
  } = state;
  return wildlifeNatureOfComplaintCodes;
};

export const selectAreaCodeDropdown = (state: RootState): Array<Option> => {
  const {
    codeTables: { areaCodes },
  } = state;
  return areaCodes;
};

export const selectAttractantCodeDropdown = (
  state: RootState
): Array<Option> => {
  const {
    codeTables: { attractantCodes },
  } = state;
  return attractantCodes;
};

export const selectedZoneCodeDropdown = (
  state: RootState
): Array<DropdownOption> => {
  const {
    codeTables: { regions },
  } = state;
  return regions;
};

export const selectRegionCodeDropdown = (
  state: RootState
): Array<DropdownOption> => {
  const {
    codeTables: { zones },
  } = state;
  return zones;
};

export const selectCommunityCodeDropdown = (
  state: RootState
): Array<DropdownOption> => {
  const {
    codeTables: { communities },
  } = state;
  return communities;
};

export default codeTableSlice.reducer;
