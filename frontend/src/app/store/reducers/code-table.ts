import { PayloadAction, createSelector, createSlice } from "@reduxjs/toolkit";
import { AppThunk, RootState, store } from "@store/store";
import { from } from "linq-to-typescript";
import config from "@/config";
import { CodeTableState } from "@apptypes/state/code-table-state";
import { ComplaintStatusCode } from "@apptypes/code-tables/complaint-status-code";
import Option from "@apptypes/app/option";
import { generateApiParameters, get } from "@common/api";
import { DropdownOption } from "@apptypes/app/drop-down-option";
import { Agency } from "@apptypes/app/code-tables/agency";
import { Attractant } from "@apptypes/app/code-tables/attactant";
import { CODE_TABLE_TYPES } from "@constants/code-table-types";
import { NatureOfComplaint } from "@apptypes/app/code-tables/nature-of-complaint";
import { Species } from "@apptypes/app/code-tables/species";
import { Violation } from "@apptypes/app/code-tables/violation";
import { ComplaintType } from "@apptypes/app/code-tables/complaint-type";
import { Region } from "@apptypes/app/code-tables/region";
import { Zone } from "@apptypes/app/code-tables/zone";
import { Community } from "@apptypes/app/code-tables/community";
import { OrganizationCodeTable } from "@apptypes/app/code-tables/organization-code-table";
import { ReportedBy } from "@apptypes/app/code-tables/reported-by";
import { Justification } from "@apptypes/app/code-tables/justification";
import { AssessmentType } from "@apptypes/app/code-tables/assessment-type";
import { Sex } from "@apptypes/app/code-tables/sex";
import { Age } from "@apptypes/app/code-tables/age";
import { ThreatLevel } from "@apptypes/app/code-tables/threat-level";
import { ConflictHistory } from "@apptypes/app/code-tables/conflict-history";
import { EarTag } from "@apptypes/app/code-tables/ear-tag";
import { WildlifeComplaintOutcome } from "@apptypes/app/code-tables/wildlife-complaint-outcome";
import { Drug } from "@apptypes/app/code-tables/drug";
import { DrugMethod } from "@apptypes/app/code-tables/drug-method";
import { DrugRemainingOutcome } from "@apptypes/app/code-tables/drug-remaining-outcome";
import { Equipment } from "@apptypes/app/code-tables/equipment";
import { PreventionType } from "@apptypes/app/code-tables/prevention-type";
import { GirType } from "@apptypes/app/code-tables/gir-type";
import { getUserAgency } from "@service/user-service";
import {
  fetchDischargeTypes,
  fetchNonComplianceTypes,
  fetchSectorTypes,
  fetchScheduleTypes,
  fetchCEEBDecisionTypes,
  fetchScheduleSectorTypes,
  fetchEquipmentStatus,
  fetchParkAreas,
} from "./code-table-thunks";
import { TeamType } from "@apptypes/app/code-tables/team";
import { CaseLocationType } from "@apptypes/app/code-tables/case-location";
import { IPMAuthCategoryType } from "@apptypes/app/code-tables/ipm-auth-category";
import { HwcrOutcomeActionedBy } from "@/app/types/app/code-tables/hwcr-outcome-actioned-by";

const initialState: CodeTableState = {
  agency: [],
  attractant: [],
  "complaint-status": [],
  "complaint-type": [],
  "nature-of-complaint": [],
  species: [],
  violation: [],
  regions: [],
  zones: [],
  communities: [],
  "area-codes": [],
  "reported-by": [],
  justification: [],
  "assessment-type": [],
  "prevention-type": [],
  sex: [],
  age: [],
  "threat-level": [],
  "conflict-history": [],
  "ear-tag": [],
  "wildlife-outcomes": [],
  "hwcr-outcome-actioned-by-codes": [],
  drugs: [],
  "drug-methods": [],
  "drug-remaining-outcomes": [],
  equipment: [],
  "gir-type": [],
  discharge: [],
  "non-compliance": [],
  sector: [],
  schedule: [],
  "decision-type": [],
  scheduleSector: [],
  "schedule-sector-type": [],
  team: [],
  "complaint-method-received-codes": [],
  "lead-agency": [],
  "assessment-cat1-type": [],
  "ipm-auth-category": [],
  "case-location-type": [],
  "equipment-status": [],
  "park-area": [],
};

export const codeTableSlice = createSlice({
  name: "code-table",
  initialState,

  reducers: {
    setCodeTable: (state: CodeTableState, action: PayloadAction<{ key: string; data: Array<any> }>) => {
      const {
        payload: { key, data },
      } = action;
      return { ...state, [key]: data };
    },
  },

  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {},
});

export const { setCodeTable } = codeTableSlice.actions;

export const fetchAllCodeTables = (): AppThunk => async (dispatch) => {
  const state = store.getState();
  const {
    codeTables: {
      "complaint-type": complaintType,
      "area-codes": areaCodes,
      "complaint-status": complaintStatus,
      attractant,
      agency,
      violation,
      species,
      "nature-of-complaint": natureOfComplaint,
      regions,
      zones,
      communities,
      "reported-by": reportedBy,
      justification,
      "assessment-type": assessmentType,
      "prevention-type": preventionAction,
      sex,
      age,
      "threat-level": threatLevels,
      "conflict-history": conflictHistory,
      "ear-tag": ears,
      "wildlife-outcomes": wildlifeOutcomes,
      "hwcr-outcome-actioned-by-codes": hwcrOutcomeActionedByCodes,
      drugs,
      "drug-methods": drugUseMethods,
      "drug-remaining-outcomes": remainingDrugUse,
      equipment,
      "gir-type": girType,
      discharge,
      "non-compliance": nonCompliance,
      sector,
      schedule,
      "decision-type": decisionType,
      "schedule-sector-type": scheduleSectorType,
      team,
      "complaint-method-received-codes": complaintMethodReceived,
      "lead-agency": leadAgency,
      "assessment-cat1-type": assessmentCat1Type,
      "ipm-auth-category": ipmAuthCategoryType,
      "case-location-type": caseLocationType,
      "equipment-status": equipmentStatus,
      "park-area": parkArea,
    },
  } = state;

  try {
    if (!from(agency).any()) {
      dispatch(fetchAgencies());
    }

    if (!from(complaintStatus).any()) {
      dispatch(fetchComplaintStatus());
    }

    if (!from(violation).any()) {
      dispatch(fetchViolations());
    }

    if (!from(species).any()) {
      dispatch(fetchSpecies());
    }

    if (!from(natureOfComplaint).any()) {
      dispatch(fetchNatureOfComplaints());
    }

    if (!from(attractant).any()) {
      dispatch(fetchAttractants());
    }

    if (!from(regions).any()) {
      dispatch(fetchRegions());
    }

    if (!from(zones).any()) {
      dispatch(fetchZones());
    }

    if (!from(communities).any()) {
      dispatch(fetchCommunities());
    }

    if (!from(areaCodes).any()) {
      dispatch(fetchAreaCodes());
    }

    if (!from(complaintType).any()) {
      dispatch(fetchComplaintTypeCodes());
    }
    if (!from(reportedBy).any()) {
      dispatch(fetchReportedByCodes());
    }
    if (!from(justification).any()) {
      dispatch(fetchJustificationCodes());
    }
    if (!from(assessmentType).any()) {
      dispatch(fetchAssessmentTypeCodes());
    }
    if (!from(preventionAction).any()) {
      dispatch(fetchPreventionAction());
    }
    if (!from(sex).any()) {
      dispatch(fetchSexes());
    }
    if (!from(age).any()) {
      dispatch(fetchAges());
    }
    if (!from(threatLevels).any()) {
      dispatch(fetchThreatLevels());
    }
    if (!from(conflictHistory).any()) {
      dispatch(fetchConfictHistories());
    }
    if (!from(ears).any()) {
      dispatch(fetchEars());
    }
    if (!from(wildlifeOutcomes).any()) {
      dispatch(fetchWildlifeComplaintOutcomes());
    }
    if (!from(hwcrOutcomeActionedByCodes).any()) {
      dispatch(fetchHwcrOutcomeActionedByCodes());
    }
    if (!from(drugs).any()) {
      dispatch(fetchDrugs());
    }
    if (!from(drugUseMethods).any()) {
      dispatch(fetchDrugUseMethods());
    }
    if (!from(remainingDrugUse).any()) {
      dispatch(fetchRemainingDrugUse());
    }
    if (!from(equipment).any()) {
      dispatch(fetchEquipment());
    }
    if (!from(girType).any()) {
      dispatch(fetchGirTypes());
    }
    if (!from(discharge).any()) {
      dispatch(fetchDischargeTypes());
    }
    if (!from(nonCompliance).any()) {
      dispatch(fetchNonComplianceTypes());
    }
    if (!from(sector).any()) {
      dispatch(fetchSectorTypes());
    }
    if (!from(schedule).any()) {
      dispatch(fetchScheduleTypes());
    }
    if (!from(scheduleSectorType).any()) {
      dispatch(fetchScheduleSectorTypes());
    }
    if (!from(decisionType).any()) {
      dispatch(fetchCEEBDecisionTypes());
    }
    if (!from(team).any()) {
      dispatch(fetchTeam());
    }
    if (!from(complaintMethodReceived).any()) {
      dispatch(fetchComplaintMethodReceivedCodes());
    }
    if (!from(leadAgency).any()) {
      dispatch(fetchLeadAgencies());
    }
    if (!from(caseLocationType).any()) {
      dispatch(fetchCaseLocationTypes());
    }
    if (!from(assessmentCat1Type).any()) {
      dispatch(fetchAssessmentCat1Types());
    }
    if (!from(ipmAuthCategoryType).any()) {
      dispatch(fetchIPMAuthCategories());
    }
    if (!from(equipmentStatus).any()) {
      dispatch(fetchEquipmentStatus());
    }
    if (!from(parkArea).any()) {
      dispatch(fetchParkAreas());
    }
  } catch (error) {}
};

export const fetchComplaintCodeTables = (): AppThunk => async (dispatch) => {
  try {
    dispatch(fetchAgencies());
    dispatch(fetchComplaintStatus());
    dispatch(fetchViolations());
    dispatch(fetchSpecies());
    dispatch(fetchNatureOfComplaints());
    dispatch(fetchAttractants());
    dispatch(fetchRegions());
    dispatch(fetchZones());
    dispatch(fetchAreaCodes());
    dispatch(fetchCommunities());
    dispatch(fetchComplaintTypeCodes());
    dispatch(fetchReportedByCodes());
    dispatch(fetchGirTypes());
    dispatch(fetchComplaintMethodReceivedCodes());
    dispatch(fetchTeam());
  } catch (error) {
    console.error(error);
  }
};

export const fetchCaseCodeTables = (): AppThunk => async (dispatch) => {
  try {
    dispatch(fetchJustificationCodes());
    dispatch(fetchAssessmentTypeCodes());
    dispatch(fetchPreventionAction());
    dispatch(fetchSexes());
    dispatch(fetchAges());
    dispatch(fetchThreatLevels());
    dispatch(fetchConfictHistories());
    dispatch(fetchEars());
    dispatch(fetchWildlifeComplaintOutcomes());
    dispatch(fetchHwcrOutcomeActionedByCodes());
    dispatch(fetchDrugs());
    dispatch(fetchDrugUseMethods());
    dispatch(fetchRemainingDrugUse());
    dispatch(fetchEquipment());
    dispatch(fetchDischargeTypes());
    dispatch(fetchNonComplianceTypes());
    dispatch(fetchSectorTypes());
    dispatch(fetchScheduleTypes());
    dispatch(fetchCEEBDecisionTypes());
    dispatch(fetchScheduleSectorTypes());
    dispatch(fetchLeadAgencies());
    dispatch(fetchAssessmentCat1Types());
    dispatch(fetchCaseLocationTypes());
    dispatch(fetchIPMAuthCategories());
    dispatch(fetchEquipmentStatus());
    dispatch(fetchParkAreas());
  } catch (error) {
    console.error(error);
  }
};

export const fetchAgencies = (): AppThunk => async (dispatch) => {
  const parameters = generateApiParameters(`${config.API_BASE_URL}/v1/code-table/${CODE_TABLE_TYPES.AGENCY}`);
  const response = await get<Array<Agency>>(dispatch, parameters);

  if (response && from(response).any()) {
    const payload = { key: CODE_TABLE_TYPES.AGENCY, data: response };
    dispatch(setCodeTable(payload));
  }
};

export const fetchAttractants = (): AppThunk => async (dispatch) => {
  const parameters = generateApiParameters(`${config.API_BASE_URL}/v1/code-table/${CODE_TABLE_TYPES.ATTRACTANT}`);
  const response = await get<Array<Attractant>>(dispatch, parameters);

  if (response && from(response).any()) {
    const payload = { key: CODE_TABLE_TYPES.ATTRACTANT, data: response };
    dispatch(setCodeTable(payload));
  }
};

export const fetchComplaintStatus = (): AppThunk => async (dispatch) => {
  const parameters = generateApiParameters(`${config.API_BASE_URL}/v1/code-table/${CODE_TABLE_TYPES.COMPLAINT_STATUS}`);
  const response = await get<Array<ComplaintStatusCode>>(dispatch, parameters);

  if (response && from(response).any()) {
    const payload = { key: CODE_TABLE_TYPES.COMPLAINT_STATUS, data: response };
    dispatch(setCodeTable(payload));
  }
};

export const fetchNatureOfComplaints = (): AppThunk => async (dispatch) => {
  const parameters = generateApiParameters(
    `${config.API_BASE_URL}/v1/code-table/${CODE_TABLE_TYPES.NATURE_OF_COMPLAINT}`,
  );
  const response = await get<Array<NatureOfComplaint>>(dispatch, parameters);

  if (response && from(response).any()) {
    const payload = {
      key: CODE_TABLE_TYPES.NATURE_OF_COMPLAINT,
      data: response,
    };
    dispatch(setCodeTable(payload));
  }
};

export const fetchSpecies = (): AppThunk => async (dispatch) => {
  const parameters = generateApiParameters(`${config.API_BASE_URL}/v1/code-table/${CODE_TABLE_TYPES.SPECIES}`);
  const response = await get<Array<Species>>(dispatch, parameters);

  if (response && from(response).any()) {
    const payload = {
      key: CODE_TABLE_TYPES.SPECIES,
      data: response,
    };
    dispatch(setCodeTable(payload));
  }
};

export const fetchViolations = (): AppThunk => async (dispatch) => {
  const parameters = generateApiParameters(`${config.API_BASE_URL}/v1/code-table/${CODE_TABLE_TYPES.VIOLATIONS}`);
  const response = await get<Array<Violation>>(dispatch, parameters);

  if (response && from(response).any()) {
    const payload = {
      key: CODE_TABLE_TYPES.VIOLATIONS,
      data: response,
    };
    dispatch(setCodeTable(payload));
  }
};

export const fetchComplaintTypeCodes = (): AppThunk => async (dispatch) => {
  const parameters = generateApiParameters(`${config.API_BASE_URL}/v1/code-table/${CODE_TABLE_TYPES.COMPLAINT_TYPE}`);
  const response = await get<Array<ComplaintType>>(dispatch, parameters);

  if (response && from(response).any()) {
    const payload = {
      key: CODE_TABLE_TYPES.COMPLAINT_TYPE,
      data: response,
    };
    dispatch(setCodeTable(payload));
  }
};

//-- these are going to need to come from the organizations
export const fetchAreaCodes = (): AppThunk => async (dispatch) => {
  const agency = "cos"; //-- TODO: when CE-212 is started this needs to be updated

  const parameters = generateApiParameters(`${config.API_BASE_URL}/v1/code-table/organization-by-agency/${agency}`);
  const response = await get<Array<OrganizationCodeTable>>(dispatch, parameters);

  if (response && from(response).any()) {
    const payload = {
      key: CODE_TABLE_TYPES.AREA_CODES,
      data: response,
    };
    dispatch(setCodeTable(payload));
  }
};

export const fetchRegions = (): AppThunk => async (dispatch) => {
  const agency = "cos"; //-- TODO: when CE-212 is started this needs to be updated

  const parameters = generateApiParameters(`${config.API_BASE_URL}/v1/code-table/regions-by-agency/${agency}`);
  const response = await get<Array<Region>>(dispatch, parameters);

  if (response && from(response).any()) {
    const payload = {
      key: CODE_TABLE_TYPES.REGIONS,
      data: response,
    };
    dispatch(setCodeTable(payload));
  }
};

export const fetchZones = (): AppThunk => async (dispatch) => {
  const agency = "cos"; //-- TODO: when CE-212 is started this needs to be updated

  const parameters = generateApiParameters(`${config.API_BASE_URL}/v1/code-table/zones-by-agency/${agency}`);
  const response = await get<Array<Zone>>(dispatch, parameters);

  if (response && from(response).any()) {
    const payload = {
      key: CODE_TABLE_TYPES.ZONES,
      data: response,
    };
    dispatch(setCodeTable(payload));
  }
};

export const fetchCommunities = (): AppThunk => async (dispatch) => {
  const agency = "cos"; //-- TODO: when CE-212 is started this needs to be updated

  const parameters = generateApiParameters(`${config.API_BASE_URL}/v1/code-table/communities-by-agency/${agency}`);
  const response = await get<Array<Community>>(dispatch, parameters);

  if (response && from(response).any()) {
    const payload = {
      key: CODE_TABLE_TYPES.COMMUNITIES,
      data: response,
    };
    dispatch(setCodeTable(payload));
  }
};

export const fetchReportedByCodes = (): AppThunk => async (dispatch) => {
  const parameters = generateApiParameters(`${config.API_BASE_URL}/v1/code-table/${CODE_TABLE_TYPES.REPORTED_BY}`);
  const response = await get<Array<ReportedBy>>(dispatch, parameters);
  if (response && from(response).any()) {
    const payload = { key: CODE_TABLE_TYPES.REPORTED_BY, data: response };
    dispatch(setCodeTable(payload));
  }
};

export const fetchJustificationCodes = (): AppThunk => async (dispatch) => {
  const parameters = generateApiParameters(
    `${config.API_BASE_URL}/v1/code-table/case-management/${CODE_TABLE_TYPES.JUSTIFICATION}`,
  );
  const response = await get<Array<Justification>>(dispatch, parameters);
  if (response && from(response).any()) {
    const payload = { key: CODE_TABLE_TYPES.JUSTIFICATION, data: response };
    dispatch(setCodeTable(payload));
  }
};

export const fetchAssessmentTypeCodes = (): AppThunk => async (dispatch) => {
  const parameters = generateApiParameters(
    `${config.API_BASE_URL}/v1/code-table/case-management/${CODE_TABLE_TYPES.ASSESSMENT_TYPE}`,
  );
  const response = await get<Array<AssessmentType>>(dispatch, parameters);
  if (response && from(response).any()) {
    const payload = { key: CODE_TABLE_TYPES.ASSESSMENT_TYPE, data: response };
    dispatch(setCodeTable(payload));
  }
};

export const fetchPreventionAction = (): AppThunk => async (dispatch) => {
  const parameters = generateApiParameters(
    `${config.API_BASE_URL}/v1/code-table/case-management/${CODE_TABLE_TYPES.PREVENTION_TYPE}`,
  );

  const response = await get<Array<PreventionType>>(dispatch, parameters);
  if (response && from(response).any()) {
    const payload = { key: CODE_TABLE_TYPES.PREVENTION_TYPE, data: response };
    dispatch(setCodeTable(payload));
  }
};

export const fetchSexes = (): AppThunk => async (dispatch) => {
  const parameters = generateApiParameters(`${config.API_BASE_URL}/v1/code-table/${CODE_TABLE_TYPES.SEX}`);

  const response = await get<Array<Sex>>(dispatch, parameters);
  if (response && from(response).any()) {
    const payload = { key: CODE_TABLE_TYPES.SEX, data: response };
    dispatch(setCodeTable(payload));
  }
};

export const fetchAges = (): AppThunk => async (dispatch) => {
  const parameters = generateApiParameters(`${config.API_BASE_URL}/v1/code-table/${CODE_TABLE_TYPES.AGE}`);

  const response = await get<Array<Age>>(dispatch, parameters);
  if (response && from(response).any()) {
    const payload = { key: CODE_TABLE_TYPES.AGE, data: response };
    dispatch(setCodeTable(payload));
  }
};

export const fetchThreatLevels = (): AppThunk => async (dispatch) => {
  const parameters = generateApiParameters(`${config.API_BASE_URL}/v1/code-table/${CODE_TABLE_TYPES.THREAT_LEVEL}`);

  const response = await get<Array<ThreatLevel>>(dispatch, parameters);
  if (response && from(response).any()) {
    const payload = { key: CODE_TABLE_TYPES.THREAT_LEVEL, data: response };
    dispatch(setCodeTable(payload));
  }
};

export const fetchConfictHistories = (): AppThunk => async (dispatch) => {
  const parameters = generateApiParameters(`${config.API_BASE_URL}/v1/code-table/${CODE_TABLE_TYPES.CONFLICT_HISTORY}`);

  const response = await get<Array<ConflictHistory>>(dispatch, parameters);
  if (response && from(response).any()) {
    const payload = { key: CODE_TABLE_TYPES.CONFLICT_HISTORY, data: response };
    dispatch(setCodeTable(payload));
  }
};

export const fetchEars = (): AppThunk => async (dispatch) => {
  const parameters = generateApiParameters(`${config.API_BASE_URL}/v1/code-table/${CODE_TABLE_TYPES.EARS}`);

  const response = await get<Array<EarTag>>(dispatch, parameters);
  if (response && from(response).any()) {
    const payload = { key: CODE_TABLE_TYPES.EARS, data: response };
    dispatch(setCodeTable(payload));
  }
};

export const fetchWildlifeComplaintOutcomes = (): AppThunk => async (dispatch) => {
  const parameters = generateApiParameters(
    `${config.API_BASE_URL}/v1/code-table/${CODE_TABLE_TYPES.WILDLIFE_OUTCOMES}`,
  );

  const response = await get<Array<WildlifeComplaintOutcome>>(dispatch, parameters);
  if (response && from(response).any()) {
    const payload = { key: CODE_TABLE_TYPES.WILDLIFE_OUTCOMES, data: response };
    dispatch(setCodeTable(payload));
  }
};

export const fetchHwcrOutcomeActionedByCodes = (): AppThunk => async (dispatch) => {
  const parameters = generateApiParameters(
    `${config.API_BASE_URL}/v1/code-table/${CODE_TABLE_TYPES.HWCR_OUTCOME_ACTIONED_BY}`,
  );

  const response = await get<Array<HwcrOutcomeActionedBy>>(dispatch, parameters);
  if (response && from(response).any()) {
    const payload = { key: CODE_TABLE_TYPES.HWCR_OUTCOME_ACTIONED_BY, data: response };
    dispatch(setCodeTable(payload));
  }
};

export const fetchDrugs = (): AppThunk => async (dispatch) => {
  const parameters = generateApiParameters(`${config.API_BASE_URL}/v1/code-table/${CODE_TABLE_TYPES.DRUGS}`);

  const response = await get<Array<Drug>>(dispatch, parameters);
  if (response && from(response).any()) {
    const payload = { key: CODE_TABLE_TYPES.DRUGS, data: response };
    dispatch(setCodeTable(payload));
  }
};

export const fetchDrugUseMethods = (): AppThunk => async (dispatch) => {
  const parameters = generateApiParameters(`${config.API_BASE_URL}/v1/code-table/${CODE_TABLE_TYPES.DRUG_METHOD_USE}`);

  const response = await get<Array<DrugMethod>>(dispatch, parameters);
  if (response && from(response).any()) {
    const payload = { key: CODE_TABLE_TYPES.DRUG_METHOD_USE, data: response };
    dispatch(setCodeTable(payload));
  }
};

export const fetchRemainingDrugUse = (): AppThunk => async (dispatch) => {
  const parameters = generateApiParameters(
    `${config.API_BASE_URL}/v1/code-table/${CODE_TABLE_TYPES.REMAINING_DRUG_USE}`,
  );

  const response = await get<Array<DrugRemainingOutcome>>(dispatch, parameters);
  if (response && from(response).any()) {
    const payload = { key: CODE_TABLE_TYPES.REMAINING_DRUG_USE, data: response };
    dispatch(setCodeTable(payload));
  }
};

export const fetchEquipment = (): AppThunk => async (dispatch) => {
  const parameters = generateApiParameters(`${config.API_BASE_URL}/v1/code-table/${CODE_TABLE_TYPES.EQUIPMENT}`);

  const response = await get<Array<Equipment>>(dispatch, parameters);
  if (response && from(response).any()) {
    const payload = { key: CODE_TABLE_TYPES.EQUIPMENT, data: response };
    dispatch(setCodeTable(payload));
  }
};

export const fetchGirTypes = (): AppThunk => async (dispatch) => {
  const parameters = generateApiParameters(`${config.API_BASE_URL}/v1/code-table/${CODE_TABLE_TYPES.GIR_TYPE}`);

  const response = await get<Array<GirType>>(dispatch, parameters);
  if (response && from(response).any()) {
    const payload = { key: CODE_TABLE_TYPES.GIR_TYPE, data: response };
    dispatch(setCodeTable(payload));
  }
};

export const fetchTeam = (): AppThunk => async (dispatch) => {
  const parameters = generateApiParameters(`${config.API_BASE_URL}/v1/code-table/${CODE_TABLE_TYPES.TEAM}`);
  const response = await get<Array<TeamType>>(dispatch, parameters);
  if (response && from(response).any()) {
    const payload = { key: CODE_TABLE_TYPES.TEAM, data: response };
    dispatch(setCodeTable(payload));
  }
};

export const fetchComplaintMethodReceivedCodes = (): AppThunk => async (dispatch) => {
  const agency = getUserAgency();
  const parameters = generateApiParameters(
    `${config.API_BASE_URL}/v1/code-table/complaint-method-received-by-agency/${agency}`,
  );
  const response: any = await get(dispatch, parameters);
  if (response && from(response).any()) {
    const payload = { key: CODE_TABLE_TYPES.COMPLAINT_METHOD_RECEIVED, data: response };
    dispatch(setCodeTable(payload));
  }
};

export const fetchLeadAgencies = (): AppThunk => async (dispatch) => {
  const parameters = generateApiParameters(`${config.API_BASE_URL}/v1/code-table/${CODE_TABLE_TYPES.LEAD_AGENCY}`);

  const response = await get<Array<Agency>>(dispatch, parameters);
  if (response && from(response).any()) {
    const payload = { key: CODE_TABLE_TYPES.LEAD_AGENCY, data: response };
    dispatch(setCodeTable(payload));
  }
};

export const fetchAssessmentCat1Types = (): AppThunk => async (dispatch) => {
  const parameters = generateApiParameters(
    `${config.API_BASE_URL}/v1/code-table/${CODE_TABLE_TYPES.ASSESSMENT_CAT1_TYPE}`,
  );

  const response = await get<Array<AssessmentType>>(dispatch, parameters);
  if (response && from(response).any()) {
    const payload = { key: CODE_TABLE_TYPES.ASSESSMENT_CAT1_TYPE, data: response };
    dispatch(setCodeTable(payload));
  }
};

export const fetchCaseLocationTypes = (): AppThunk => async (dispatch) => {
  const parameters = generateApiParameters(
    `${config.API_BASE_URL}/v1/code-table/${CODE_TABLE_TYPES.CASE_LOCATION_TYPE}`,
  );

  const response = await get<Array<CaseLocationType>>(dispatch, parameters);
  if (response && from(response).any()) {
    const payload = { key: CODE_TABLE_TYPES.CASE_LOCATION_TYPE, data: response };
    dispatch(setCodeTable(payload));
  }
};

export const fetchIPMAuthCategories = (): AppThunk => async (dispatch) => {
  const parameters = generateApiParameters(
    `${config.API_BASE_URL}/v1/code-table/${CODE_TABLE_TYPES.IPM_AUTH_CATEGORY_TYPE}`,
  );

  const response = await get<Array<IPMAuthCategoryType>>(dispatch, parameters);
  if (response && from(response).any()) {
    const payload = { key: CODE_TABLE_TYPES.IPM_AUTH_CATEGORY_TYPE, data: response };
    dispatch(setCodeTable(payload));
  }
};

export const selectCodeTable =
  (table: string) =>
  (state: RootState): Array<any> => {
    const { codeTables } = state;
    const selected = codeTables[table as keyof CodeTableState];

    return selected;
  };

export const selectComplaintTypeDropdown = createSelector(
  (state: RootState) => state.codeTables["complaint-type"],
  (complaintTypes) =>
    complaintTypes.map(({ complaintType, longDescription, isActive }) => ({
      label: longDescription,
      value: complaintType,
      isActive,
    })),
);

export const selectCreatableComplaintTypeDropdown = createSelector(
  (state: RootState) => state.codeTables["complaint-type"],
  (complaintTypes) =>
    complaintTypes.map(({ complaintType, longDescription }) => ({
      label: longDescription,
      value: complaintType,
    })),
);

export const selectAgencyDropdown = createSelector(
  (state: RootState) => state.codeTables.agency,
  (agencyItems) =>
    agencyItems
      .filter((agency) => !agency.externalAgencyInd) // filter out the pseudo-agencies
      .map(({ agency, longDescription, isActive }) => ({
        label: longDescription,
        value: agency,
        isActive,
      })),
);

export const selectLeadAgencyDropdown = (state: RootState): Array<Option> => {
  const {
    codeTables: { "lead-agency": leadAgency },
  } = state;

  const data = leadAgency.map(({ agency, longDescription, isActive }) => {
    const item: Option = { label: longDescription, value: agency, isActive };
    return item;
  });
  return data;
};

export const selectTeamDropdown = createSelector(
  (state: RootState) => state.codeTables.team,
  (team) =>
    team.map(({ team, longDescription, isActive }) => ({
      label: longDescription,
      value: team,
      isActive,
    })),
);

export const selectReportedByDropdown = createSelector(
  (state: RootState) => state.codeTables["reported-by"],
  (reportedBy) =>
    reportedBy.map(({ reportedBy, longDescription, isActive }) => ({
      label: longDescription,
      value: reportedBy,
      isActive,
    })),
);

// This returns the complaint status codes, without the pending status.
export const selectComplaintStatusCodeDropdown = (state: RootState): Array<Option> => {
  const {
    codeTables: { "complaint-status": complaintStatus },
  } = state;

  // Filter out items where complaintStatus is "PENDREV" since it should only appear on the filter screen.
  const filteredStatus = complaintStatus.filter((status) => status.complaintStatus !== "PENDREV");

  const data = filteredStatus.map(({ complaintStatus, longDescription, isActive }) => {
    const item: Option = { label: longDescription, value: complaintStatus, isActive };
    return item;
  });

  return data;
};

// This returns the complaint status codes, with the pending status.
export const selectComplaintStatusWithPendingCodeDropdown = createSelector(
  (state: RootState) => state.codeTables["complaint-status"],
  (complaintStatus) =>
    complaintStatus.map(({ complaintStatus, longDescription }) => ({
      label: longDescription,
      value: complaintStatus,
    })),
);

export const selectSpeciesCodeDropdown = createSelector(
  (state: RootState) => state.codeTables.species,
  (species) =>
    species.map(({ species, longDescription, isActive }) => ({
      label: longDescription,
      value: species,
      isActive,
    })),
);

export const selectViolationCodeDropdown = (agency: string) =>
  createSelector(
    (state: RootState) => state.codeTables.violation,
    (violation) =>
      violation
        .filter(({ agencyCode }) => agencyCode === agency)
        .map(({ violation, longDescription, isActive }) => ({
          label: longDescription,
          value: violation,
          isActive,
        })),
  );

export const selectGirTypeCodeDropdown = createSelector(
  (state: RootState) => state.codeTables["gir-type"],
  (girType) =>
    girType.map(({ girType, longDescription, isActive }) => ({
      label: longDescription,
      value: girType,
      isActive,
    })),
);

export const selectComplaintReceivedMethodDropdown = createSelector(
  (state: RootState) => state.codeTables["complaint-method-received-codes"],
  (complaintMethodReceivedType) =>
    complaintMethodReceivedType.map(({ complaintMethodReceivedCode, longDescription, isActive }) => ({
      label: longDescription,
      value: complaintMethodReceivedCode,
      isActive,
    })),
);

export const selectJustificationCodeDropdown = createSelector(
  (state: RootState) => state.codeTables.justification,
  (justification) =>
    justification.map(({ justification, longDescription, isActive }) => ({
      label: longDescription,
      value: justification,
      isActive,
    })),
);

export const selectAssessmentTypeCodeDropdown = createSelector(
  (state: RootState) => state.codeTables["assessment-type"],
  (assessmentType) => {
    return assessmentType.map(({ assessmentType, longDescription, isActive }) => ({
      label: longDescription,
      value: assessmentType,
      isActive,
    }));
  },
);

const yesNoOptions: Option[] = [
  { value: "Yes", label: "Yes" },
  { value: "No", label: "No" },
];

export const selectYesNoCodeDropdown = (): Array<Option> => {
  return yesNoOptions;
};

export const selectPreventionTypeCodeDropdown = createSelector(
  (state: RootState) => state.codeTables["prevention-type"],
  (_state: RootState, agencyCode: string) => agencyCode,
  (preventionType, agencyCode) =>
    preventionType
      .filter(({ agencyCode: itemAgencyCode }) => itemAgencyCode === agencyCode)
      .map(({ preventionType, longDescription, isActive }) => ({
        label: longDescription,
        value: preventionType,
        isActive,
      })),
);

export const selectHwcrNatureOfComplaintCodeDropdown = createSelector(
  (state: RootState) => state.codeTables["nature-of-complaint"],
  (natureOfComplaints) =>
    natureOfComplaints.map(({ natureOfComplaint, longDescription, isActive }) => ({
      label: longDescription,
      value: natureOfComplaint,
      isActive,
    })),
);

export const selectAreaCodeDropdown = createSelector(
  (state: RootState) => state.codeTables["area-codes"],
  (areaCodes) =>
    areaCodes.map(({ area, areaName }) => ({
      value: area,
      label: areaName,
    })),
);

export const selectAttractantCodeDropdown = createSelector(
  (state: RootState) => state.codeTables.attractant,
  (attractant) =>
    attractant.map(({ attractant, shortDescription, isActive }) => ({
      label: shortDescription,
      value: attractant,
      isActive,
    })),
);

export const selectZoneCodeDropdown = createSelector(
  (state: RootState) => state.codeTables.zones,
  (zones) =>
    zones.map(({ code, name }) => ({
      label: name,
      value: code,
      description: name,
    })),
);

export const selectRegionCodeDropdown = createSelector(
  (state: RootState) => state.codeTables.regions,
  (regions) =>
    regions.map(({ code, name }) => ({
      label: name,
      value: code,
      description: name,
    })),
);

export const selectCommunityCodeDropdown = createSelector(
  (state: RootState) => state.codeTables.communities,
  (communities) =>
    communities.map(({ code, name }) => ({
      label: name,
      value: code,
      description: name,
    })),
);

export const selectCascadedFilter =
  (type: string, value?: string) =>
  (state: RootState): Array<DropdownOption> => {
    const {
      codeTables: { regions, zones },
    } = state;

    switch (type) {
      case "region": {
        const data = regions.map(({ code, name }) => {
          const item: DropdownOption = {
            label: name,
            value: code,
            description: name,
          };
          return item;
        });

        if (value) {
          return data.filter((item) => item.value === value);
        }

        return data;
      }
      case "zone": {
        const data = zones.map(({ code, name }) => {
          const item: DropdownOption = {
            label: name,
            value: code,
            description: name,
          };
          return item;
        });

        if (value) {
          const items = zones.filter(({ region }) => region === value);
          return items.map(({ code, name }) => {
            const item: DropdownOption = {
              label: name,
              value: code,
              description: name,
            };
            return item;
          });
        }

        return data;
      }
      case "community":
      default:
        break;
    }

    return [];
  };

export const selectCascadedFilters =
  (region?: string, zone?: string, community?: string) =>
  (state: RootState): any => {
    const {
      codeTables: { regions, zones, communities },
    } = state;

    let _regions: Array<DropdownOption> = [];
    let _zones: Array<DropdownOption> = [];
    let _communities: Array<DropdownOption> = [];

    if (!region && zone && !community) {
      const selected = zones.find((item) => item.code === zone);

      if (selected) {
        _regions = regions
          .filter((item) => item.code === selected.region)
          .map(({ code, name }) => {
            return {
              label: name,
              value: code,
              description: name,
            };
          });

        _zones = [
          {
            label: selected.name,
            value: selected.code,
            description: selected.name,
          },
        ];

        _communities = communities
          .filter((item) => item.zone === zone)
          .map(({ code, name }) => {
            return {
              label: name,
              value: code,
              description: name,
            };
          });
      }
    } else if (region && !zone && !community) {
      const selected = regions.find((item) => item.code === region);
      if (selected) {
        _regions = [
          {
            label: selected.name,
            value: selected.code,
            description: selected.name,
          },
        ];

        _zones = zones
          .filter((item) => item.region === region)
          .map(({ code, name }) => {
            return {
              label: name,
              value: code,
              description: name,
            };
          });

        _communities = communities
          .filter((item) => item.region === region)
          .map(({ code, name }) => {
            return {
              label: name,
              value: code,
              description: name,
            };
          });
      }
    } else if (!region && !zone && !community) {
      _regions = regions.map(({ code, name }) => {
        return {
          label: name,
          value: code,
          description: name,
        };
      });
      _zones = zones.map(({ code, name }) => {
        return {
          label: name,
          value: code,
          description: name,
        };
      });

      _communities = communities.map(({ code, name }) => {
        return {
          label: name,
          value: code,
          description: name,
        };
      });
      return {
        regions: _regions,
        zones: _zones,
        communities: _communities,
      };
    }

    return {
      regions: _regions,
      zones: _zones,
      communities: _communities,
    };
  };

export const selectCascadedRegion =
  (region?: string, zone?: string, community?: string) =>
  (state: RootState): Array<Option> => {
    const {
      codeTables: { regions, zones, communities },
    } = state;

    let results = regions;

    if (region) {
      return regions
        .filter((item) => item.code === region)
        .map(({ code, name }) => {
          return {
            label: name,
            value: code,
            description: name,
          };
        });
    }

    if (zone) {
      const selected = zones.find((item) => item.code === zone);

      if (selected) {
        results = regions.filter((item) => item.code === selected.region);
      }
    }

    if (community) {
      const selected = communities.find((item) => item.code === community);

      if (selected) {
        results = regions.filter((item) => item.code === selected.region);
      }
    }

    return results.map(({ code, name }) => {
      return {
        label: name,
        value: code,
        description: name,
      };
    });
  };

export const selectCascadedZone =
  (region?: string, zone?: string, community?: string) =>
  (state: RootState): Array<Option> => {
    const {
      codeTables: { zones, communities },
    } = state;

    let results = zones;

    if (zone) {
      return zones
        .filter((item) => item.code === zone)
        .map(({ code, name }) => {
          return {
            label: name,
            value: code,
            description: name,
          };
        });
    }

    if (region) {
      results = zones.filter((item) => item.region === region);
    }

    if (community) {
      const selected = communities.find((item) => item.code === community);
      if (selected) {
        results = zones.filter((item) => item.code === selected.zone);
      }
    }

    return results.map(({ code, name }) => {
      return {
        label: name,
        value: code,
        description: name,
      };
    });
  };

export const selectCascadedCommunity =
  (region?: string, zone?: string, community?: string) =>
  (state: RootState): Array<Option> => {
    const {
      codeTables: { communities },
    } = state;

    if (zone) {
      return communities
        .filter((item) => item.zone === zone)
        .map(({ code, name }) => {
          return {
            label: name,
            value: code,
            description: name,
          };
        });
    }

    if (region) {
      return communities
        .filter((item) => item.region === region)
        .map(({ code, name }) => {
          return {
            label: name,
            value: code,
            description: name,
          };
        });
    }

    return communities.map(({ code, name }) => {
      return {
        label: name,
        value: code,
        description: name,
      };
    });
  };
export const selectSexDropdown = createSelector(
  (state: RootState) => state.codeTables.sex,
  (items) =>
    items.map(({ sex: value, shortDescription: label, isActive }) => ({
      label,
      value,
      isActive,
    })),
);

export const selectAgeDropdown = createSelector(
  (state: RootState) => state.codeTables.age,
  (items) =>
    items.map(({ age: value, shortDescription: label, isActive }) => ({
      label,
      value,
      isActive,
    })),
);

export const selectThreatLevelDropdown = createSelector(
  (state: RootState) => state.codeTables["threat-level"],
  (items) =>
    items.map(({ threatLevel: value, shortDescription: label, isActive }) => ({
      label,
      value,
      isActive,
    })),
);

export const selectConflictHistoryDropdown = createSelector(
  (state: RootState) => state.codeTables["conflict-history"],
  (items) =>
    items.map(({ conflictHistory: value, shortDescription: label, isActive }) => ({
      label,
      value,
      isActive,
    })),
);

export const selectEarDropdown = createSelector(
  (state: RootState) => state.codeTables["ear-tag"],
  (items) =>
    items.map(({ earTag: value, shortDescription: label, isActive }) => ({
      label,
      value,
      isActive,
    })),
);

//Used for drop downs on Create / Edit
export const selectActiveWildlifeComplaintOutcome = (state: RootState): Array<Option> => {
  const {
    codeTables: { "wildlife-outcomes": items },
  } = state;

  let filteredItems = items.filter((item) => item.isActive === true); // Only items with active_ind = true

  // isActive was left out of the options for this since the compselect component will display all options
  // if they have no isActive field on them, so this prevents the list from getting checked twice.
  // Map the filtered and sorted items to the Option format
  const data = filteredItems.map(({ outcome: value, shortDescription: label }) => {
    const item: Option = { label, value };
    return item;
  });

  return data;
};

//Used for drop downs on Create / Edit
export const selectOutcomeActionedByOptions = (state: RootState): Array<Option> => {
  const {
    codeTables: { "hwcr-outcome-actioned-by-codes": items },
  } = state;

  const data = items.map(({ actionedBy: value, shortDescription: label }) => {
    const item: Option = { label, value };
    return item;
  });

  return data;
};

//Used for filter dropdown and View State (could be legacy data)
export const selectAllWildlifeComplaintOutcome = (state: RootState): Array<Option> => {
  const {
    codeTables: { "wildlife-outcomes": items },
  } = state;

  const data = items.map(({ outcome: value, shortDescription: label, isActive }) => {
    const item: Option = { label, value, isActive };
    return item;
  });

  return data;
};

export const selectHwcrOutcomeActionedByCode = (state: RootState): Array<Option> => {
  const {
    codeTables: { "hwcr-outcome-actioned-by-codes": items },
  } = state;

  const data = items.map(({ actionedBy: value, shortDescription: label, isActive }) => {
    const item: Option = { label, value, isActive };
    return item;
  });

  return data;
};

export const selectDrugs = (state: RootState): Array<Option> => {
  const {
    codeTables: { drugs: items },
  } = state;

  const data = items.map(({ drug: value, shortDescription: label, isActive }) => {
    const item: Option = { label, value, isActive };
    return item;
  });

  return data;
};

export const selectDrugUseMethods = (state: RootState): Array<Option> => {
  const {
    codeTables: { "drug-methods": items },
  } = state;

  const data = items.map(({ method: value, shortDescription: label, isActive }) => {
    const item: Option = { label, value, isActive };
    return item;
  });

  return data;
};

export const selectRemainingDrugUse = (state: RootState): Array<Option> => {
  const {
    codeTables: { "drug-remaining-outcomes": items },
  } = state;

  const data = items.map(({ outcome: value, shortDescription: label, isActive }) => {
    const item: Option = { label, value, isActive };
    return item;
  });

  return data;
};

export const selectActiveEquipmentDropdown = createSelector(
  (state: RootState) => state.codeTables.equipment,
  (items) => {
    let filteredItems = items.filter((item) => item.isActive === true); // Only items with active_ind = true

    // Map the filtered items to the Option format
    return filteredItems.map(({ equipment: value, shortDescription: label }) => ({
      label,
      value,
    }));
  },
);

export const selectAllEquipmentDropdown = createSelector(
  (state: RootState) => state.codeTables.equipment,
  (items) => {
    // Map the filtered items to the Option format
    return items.map(({ equipment: value, shortDescription: label, isActive }) => ({
      label,
      value,
      isActive,
    }));
  },
);

export const selectLocationDropdown = createSelector(
  (state: RootState) => state.codeTables["case-location-type"],
  (items) =>
    items.map(({ caseLocationType: value, shortDescription: label, isActive }) => {
      const item: Option = { label, value, isActive };
      return item;
    }),
);

export const selectAssessmentCat1Dropdown = createSelector(
  (state: RootState) => state.codeTables["assessment-cat1-type"],
  (items) =>
    items.map(({ assessmentType: value, shortDescription: label, isActive }) => {
      const item: Option = { label, value, isActive };
      return item;
    }),
);

export const selectTrapEquipment = (state: RootState): Array<string> => {
  const {
    codeTables: { equipment: items },
  } = state;
  const data = items
    .filter(({ isTrapIndicator: value }) => value)
    .map(({ equipment: label }) => {
      const item = label;
      return item;
    });

  return data;
};

export const selectHasQuantityEquipment = (state: RootState): Array<string> => {
  const {
    codeTables: { equipment: items },
  } = state;
  const data = items
    .filter(({ hasQuantityIndicator: value }) => value)
    .map(({ equipment: label }) => {
      const item = label;
      return item;
    });

  return data;
};

const privacyDropdownOptions: Option[] = [
  { value: "Y", label: "Yes" },
  { value: "N", label: "No" },
];
export const selectPrivacyDropdown = (): Array<Option> => privacyDropdownOptions;

// As agencies change names we often want to display the short description instead of the code
// this select returns the short description for the code.
export const selectAgencyShortDescription = createSelector(
  [(state: RootState) => state.codeTables.agency, (_: RootState, agencyCode?: string) => agencyCode],
  (agencyList, agencyCode): string => {
    const match = agencyList.find((entry) => entry.agency === agencyCode);
    return match?.shortDescription ?? "Unknown";
  },
);

export default codeTableSlice.reducer;
