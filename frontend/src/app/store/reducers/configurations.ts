import { createSlice } from "@reduxjs/toolkit";
import { RootState, AppThunk } from "../store";
import config from "../../../config";
import { toggleLoading } from "./app";
import { generateApiParameters, get } from "../../common/api";
import { from } from "linq-to-typescript";
import { ConfigurationType } from "../../types/configurations/configuration";
import { ConfigurationState } from "../../types/state/configuration-state";

const initialState: ConfigurationState = {
  configurations: [],
};

export const configurationSlice = createSlice({
  name: "configurations",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setConfigurations: (state, action) => {
      const {
        payload: { configurations },
      } = action;
      return { ...state, configurations };
    },
  },

  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {},
});

// export the actions/reducers
export const { setConfigurations } = configurationSlice.actions;

// Get list of the officers and update store
export const getConfigurations =
  (zone?: string): AppThunk =>
  async (dispatch) => {
    try {
      dispatch(toggleLoading(true));

      const parameters = generateApiParameters(
        `${config.API_BASE_URL}/v1/configuration/`
      );
      const response = await get<Array<ConfigurationType>>(dispatch, parameters);

      if (response && from(response).any()) {
        dispatch(
          setConfigurations({
            configurations: response,
          })
        );
      }
    } catch (error) {
      //-- handle errors
    } finally {
      dispatch(toggleLoading(false));
    }
  };


//-- selectors

// find configurations
export const selectDefaultPageSize =
  (state: RootState): ConfigurationType | undefined => {
    const { configurations: configurationRoot } = state.configurations;
    const configuration = configurationRoot.find((record) => record.configurationCode === 'DFLTPAGNUM');;
    return configuration;
  };

export default configurationSlice.reducer;
