import { createSlice } from "@reduxjs/toolkit";
import { RootState, AppThunk } from "../store";
import config from "../../../config";
import axios from "axios";
import { AllegationComplaint } from "../../types/complaints/allegation-complaint";
import { AllegationComplaintState } from "../../types/complaints/allegation-complaints-state";
import { Complaint } from "../../types/complaints/complaint";

const initialState: AllegationComplaintState = {
  allegationComplaints: [],
};

export const allegationComplaintSlice = createSlice({
  name: "allegationComplaints",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setAllegationComplaints: (state, action) => {
      const { payload } = action;
      const allegationComplaints:AllegationComplaint[] = payload.allegationComplaints;
      return { ...state, allegationComplaints};
    },
    updateAllegationComplaintStatus: (state, action) => {
      const { payload } = action;
      const allegationComplaints:AllegationComplaint[] = payload.allegationComplaint;
      return { ...state, allegationComplaints};
    },
  },

  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {},
});

// export the actions/reducers
export const { setAllegationComplaints } = allegationComplaintSlice.actions;

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched
export const getAllegationComplaints = (sortColumn: string, sortOrder: string, violationFilter?: Option | null, startDateFilter?: Date | undefined, endDateFilter?: Date | undefined, statusFilter?: Option | null): AppThunk => async (dispatch) => {
  const token = localStorage.getItem("user");
  if (token) {
    axios.defaults.headers.common.Authorization = `Bearer ${token}`;
    const response = await axios.get(`${config.API_BASE_URL}/v1/allegation-complaint/search`, { params: { sortColumn: sortColumn, sortOrder: sortOrder, community: "", zone: "", region: "", 
    officerAssigned: "", violationCode: violationFilter, incidentReportedStart: startDateFilter, incidentReportedEnd: endDateFilter, status: statusFilter}});
    dispatch(
      setAllegationComplaints({
        allegationComplaints: response.data
      }),
    );
  }
};

export const updateAllegationComplaintStatus = (complaint_identifier: string, newStatus: string ): AppThunk => async (dispatch) => {
  const token = localStorage.getItem("user");
  if (token) {
    axios.defaults.headers.common.Authorization = `Bearer ${token}`;
    const complaintResponse = await axios.get<Complaint>(`${config.API_BASE_URL}/v1/complaint/${complaint_identifier}`);
    
    let updatedComplaint = complaintResponse.data;
    updatedComplaint.complaint_status_code.complaint_status_code = newStatus;
    await axios.patch(`${config.API_BASE_URL}/v1/complaint/${complaint_identifier}`, {"complaint_status_code": `${newStatus}`});
    const response = await axios.get(`${config.API_BASE_URL}/v1/allegation-complaint`, { params: { sortColumn: 'incident_reported_datetime', sortOrder: 'DESC'}});
    dispatch(
      setAllegationComplaints({
        allegationComplaints: response.data
      })
    );
  }
};

export const allegationComplaints = (state: RootState) => { 
  const { allegationComplaints } = state.allegationComplaint;
  return allegationComplaints;
}

export default allegationComplaintSlice.reducer;