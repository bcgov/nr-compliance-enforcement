import { createAction, createSlice } from "@reduxjs/toolkit";
import { CasesState } from "@apptypes/state/cases-state";

const initialState: CasesState = {
  caseId: undefined,
  assessment: {
    action_required: undefined,
    date: undefined,
    justification: undefined,
    linked_complaint: undefined,
    officer: undefined,
    assessment_type: [],
  },
  prevention: {
    date: undefined,
    officer: undefined,
    prevention_type: [],
  },
  isReviewRequired: false,
  reviewComplete: undefined,
  note: {
    note: "",
  },
  equipment: [],
  subject: [],
  isInEdit: {
    assessment: false,
    prevention: false,
    equipment: false,
    animal: false,
    note: false,
    attachments: false,
    fileReview: false,
    showSectionErrors: false,
    hideAssessmentErrors: false,
    //-- ceeb
    decision: false,
    authorization: false,
  },
  decision: undefined,
  authorization: undefined,
};

export const casesSlice = createSlice({
  name: "cases",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setCaseId: (state, action) => {
      const { payload } = action;
      return { ...state, caseId: payload };
    },
    setAssessment: (state, action) => {
      const {
        payload: { assessment },
      } = action;
      state.assessment = { ...assessment }; // Update only the assessment property
    },
    setPrevention: (state, action) => {
      const {
        payload: { prevention },
      } = action;
      state.prevention = { ...prevention }; // Update only the assessment property
    },
    setIsReviewedRequired: (state, action) => {
      const { payload } = action;
      return { ...state, isReviewRequired: payload };
    },
    setReviewComplete: (state, action) => {
      const { payload } = action;
      return { ...state, reviewComplete: payload };
    },
    clearAssessment: (state) => {
      state.assessment = { ...initialState.assessment };
    },
    clearPrevention: (state) => {
      state.prevention = { ...initialState.prevention };
    },
    setCaseFile: (state, action) => {
      const {
        payload: { caseIdentifier, note, equipment, subject, reviewComplete, decision, authorization },
      } = action;

      //--
      //-- TODO: need to have each dev add thier state to this section instead of requesting
      //-- each individual state. Add assessment, prevention, equipment here
      return { ...state, caseId: caseIdentifier, note, equipment, subject, reviewComplete, decision, authorization };
    },
    setIsInEdit: (state, action) => {
      const { payload } = action;
      return {
        ...state,
        isInEdit: { ...state.isInEdit, ...payload, hideAssessmentErrors: payload.hideAssessmentErrors || false },
      };
    },
  },

  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder.addCase(resetCases, (state) => {
      return initialState;
    });
  },
});

// export the actions/reducers
export const {
  setAssessment,
  setPrevention,
  setCaseId,
  setIsReviewedRequired,
  setReviewComplete,
  setCaseFile,
  setIsInEdit,
  clearAssessment,
  clearPrevention,
} = casesSlice.actions;

export const resetPrevention = createAction("prevention/reset");
export const resetCases = createAction("cases/reset");
export default casesSlice.reducer;
