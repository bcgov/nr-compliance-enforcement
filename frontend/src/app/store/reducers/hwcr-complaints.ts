import { PayloadAction, createSlice } from "@reduxjs/toolkit";
import { RootState, AppThunk } from "../store";
import config from "../../../config";
import axios from "axios";
import { HwcrComplaint } from "../../types/complaints/hwcr-complaint";
import { HwcrComplaintsState } from "../../types/complaints/hrcr-complaints-state";
import { Complaint } from "../../types/complaints/complaint";

const initialState: HwcrComplaintsState = {
  hwcrComplaints: []
};

export const hwcrComplaintSlice = createSlice({
  name: "hwcrComplaints",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setHwcrComplaints: (state, action: PayloadAction<HwcrComplaint[]>) => {
      const { payload } = action;
      const hwcrComplaints:HwcrComplaint[] = payload;
      return { ...state, hwcrComplaints};
    },
    updateHwcrComplaintRow: (state, action: PayloadAction<HwcrComplaint>) => {
      const updatedComplaint = action.payload;
      const index = state.hwcrComplaints.findIndex(row => row.hwcr_complaint_guid === updatedComplaint.hwcr_complaint_guid);
      if (index !== -1) {
        state.hwcrComplaints[index] = updatedComplaint;
      }
    },
  },

  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {},
});

// export the actions/reducers
export const { setHwcrComplaints, updateHwcrComplaintRow } = hwcrComplaintSlice.actions;

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched
export const getHwcrComplaints = (sortColumn: string, sortOrder: string): AppThunk => async (dispatch) => {
  const token = localStorage.getItem("user");
  if (token) {
    axios.defaults.headers.common.Authorization = `Bearer ${token}`;
    const response = await axios.get<HwcrComplaint[]>(`${config.API_BASE_URL}/v1/hwcr-complaint`, { params: { sortColumn: sortColumn, sortOrder: sortOrder}});
    dispatch(
      setHwcrComplaints(response.data)
    );
  }
};

// Update the complaint status and dispatch this change so that the affected row is updated in the state
export const updateHwlcComplaintStatus = (complaint_identifier: string, newStatus: string, hwcr_guid: string ): AppThunk => async (dispatch) => {
  const token = localStorage.getItem("user");
  if (token) {
    axios.defaults.headers.common.Authorization = `Bearer ${token}`;
    const complaintResponse = await axios.get<Complaint>(`${config.API_BASE_URL}/v1/complaint/${complaint_identifier}`);
    
    // first update the complaint status
    let updatedComplaint = complaintResponse.data;
    updatedComplaint.complaint_status_code.complaint_status_code = newStatus;
    await axios.patch(`${config.API_BASE_URL}/v1/complaint/${complaint_identifier}`, {"complaint_status_code": `${newStatus}`});
    
    // now get that hwcr complaint row and update the state
    const response = await axios.get(`${config.API_BASE_URL}/v1/hwcr-complaint/${hwcr_guid}`);
    dispatch(
      updateHwcrComplaintRow(response.data)
    );
  }
};

export const updateHwlcComplaintStatus = (complaint_identifier: string, newStatus: string ): AppThunk => async (dispatch) => {
  const token = localStorage.getItem("user");
  if (token) {
    axios.defaults.headers.common.Authorization = `Bearer ${token}`;
    const complaintResponse = await axios.get<Complaint>(`${config.API_BASE_URL}/v1/complaint/${complaint_identifier}`);
    
    let updatedComplaint = complaintResponse.data;
    updatedComplaint.complaint_status_code.complaint_status_code = newStatus;
    await axios.patch(`${config.API_BASE_URL}/v1/complaint/${complaint_identifier}`, {"complaint_status_code": `${newStatus}`});
    const response = await axios.get(`${config.API_BASE_URL}/v1/hwcr-complaint`, { params: { sortColumn: 'incident_reported_datetime', sortOrder: 'DESC'}});
    dispatch(
      setHwcrComplaints({
        hwcrComplaints: response.data
      })
    );
  }
};


export const hwcrComplaints = (state: RootState) => { 
  const { hwcrComplaints } = state.hwcrComplaint;
  return hwcrComplaints;
}

export default hwcrComplaintSlice.reducer;