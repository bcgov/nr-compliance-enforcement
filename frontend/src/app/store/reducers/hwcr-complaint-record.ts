/*
import { createSlice } from "@reduxjs/toolkit";
import { RootState, AppThunk } from "../store";
import config from "../../../config";
import axios from "axios";
import { HwcrComplaint } from "../../types/complaints/hwcr-complaint";
import { HwcrComplaintState } from "../../types/complaints/hrcr-complaints-state";
import { Complaint } from "../../types/complaints/complaint";
import { HwcrComplaintRecordState } from "../../types/complaints/hrcr-complaint-record-state";

const initialState: HwcrComplaintRecordState = {
  selectedHwcfComplaint: hwcHwcrComplaintrComplaint
};

export const selectedHwcrComplaintSlice = createSlice({
  name: "selectedHwcfComplaint",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setSelectedHwcfComplaint: (state, action) => {
      const { payload } = action;
      const hwcrComplaint:HwcrComplaint = payload.hwcrComplaint;
      return { ...state, hwcrComplaint};
    }
  },

  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {},
});

// export the actions/reducers
export const { setSelectedHwcfComplaint } = selectedHwcrComplaintSlice.actions;

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched
export const getHwcrComplaint = (sortColumn: string, sortOrder: string): AppThunk => async (dispatch) => {
  const token = localStorage.getItem("user");
  if (token) {
    axios.defaults.headers.common.Authorization = `Bearer ${token}`;
    const response = await axios.get(`${config.API_BASE_URL}/v1/hwcr-complaint`, { params: { sortColumn: sortColumn, sortOrder: sortOrder}});
    dispatch(
      setSelectedHwcfComplaint({
        selectedHwcfComplaint: response.data
      })
    );
  }
};

export const updateComplaintStatus = (complaint_identifier: string, newStatus: string ): AppThunk => async (dispatch) => {
  const token = localStorage.getItem("user");
  if (token) {
    axios.defaults.headers.common.Authorization = `Bearer ${token}`;
    const complaintResponse = await axios.get<Complaint>(`${config.API_BASE_URL}/v1/complaint/${complaint_identifier}`);
    
    let updatedComplaint = complaintResponse.data;
    updatedComplaint.complaint_status_code.complaint_status_code = newStatus;
    const response = await axios.patch(`${config.API_BASE_URL}/v1/complaint`, { params: { complaint_identifier: complaint_identifier, updatedComplaint: updatedComplaint}});
    //dispatch(
    //  setHwcrComplaints({
    //    hwcrComplaints: response.data
    //  })
    //);
  }
};

export const selectedHwcfComplaint = (state: RootState) => { 
//  const { hwcrComplaint } = state.hwcrComplaint;
  return selectedHwcfComplaint;
}

export default selectedHwcrComplaintSlice.reducer;*/