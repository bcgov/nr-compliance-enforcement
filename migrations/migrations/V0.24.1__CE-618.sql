-- 
-- Create new tables for action_taken
-- 
CREATE TABLE
  public.action_taken (
    action_taken_guid uuid NOT NULL DEFAULT uuid_generate_v4 (),
    complaint_identifier VARCHAR(20) NULL,
    complaint_update_guid uuid NULL,
    action_details_txt TEXT NULL,
    logged_by_txt VARCHAR(250) NULL,
    action_utc_timestamp TIMESTAMP NULL,
    create_user_id VARCHAR(32) NOT NULL,
    create_utc_timestamp TIMESTAMP NOT NULL,
    update_user_id VARCHAR(32) NOT NULL,
    update_utc_timestamp TIMESTAMP NOT NULL,
    CHECK (
      complaint_identifier IS NOT NULL
      OR complaint_update_guid IS NOT NULL
    ),
    CONSTRAINT "PK_action_taken_guid" PRIMARY KEY (action_taken_guid)
  );

comment on table public.action_taken is 'Contains information about who the call centre staff contacted and when to allow Officers to know who to follow up with and/or if someone else is already taking action.';

-- Column comments
comment on column public.action_taken.action_taken_guid is 'System generated unique key for an action taken record.  This key should never be exposed to users via any system utilizing the tables.';

comment on column public.action_taken.complaint_identifier is 'Natural key for a complaint generated by webEOC.  Format is YY-###### where the number portion of the sequence resets to 0 on the new year.  Either a complaint_update_guid or a complaint_identifier must be present on the record.';

comment on column public.action_taken.complaint_update_guid is 'System generated unique key for a COMPLAINT_UPDATE.  This key should never be exposed to users via any system utilizing the tables.   Either a complaint_update_guid or a complaint_identifier must be present on the record.';

comment on column public.action_taken.action_details_txt is 'Text about who the call centre staff contacted and when';

comment on column public.action_taken.logged_by_txt is 'The name of the webEOC User that recorded the ACTION_TAKEN';

comment on column public.action_taken.action_utc_timestamp is 'The date from webEOC that the ACTION_TAKEN was recorded.   The timestamp is stored in UTC with no Offset.';

comment on column public.action_taken.create_user_id is 'The id of the user that created the ACTION_TAKEN';

comment on column public.action_taken.create_utc_timestamp is 'The timestamp when the ACTION_TAKEN was created.  The timestamp is stored in UTC with no Offset.';

comment on column public.action_taken.update_user_id is 'The id of the user that updated the ACTION_TAKEN';

comment on column public.action_taken.update_utc_timestamp is 'The timestamp when the ACTION_TAKEN was updated.  The timestamp is stored in UTC with no Offset.';

-- 
-- Create new tables for action_taken_h
-- 
CREATE TABLE
  action_taken_h (
    h_action_taken_guid uuid NOT NULL DEFAULT uuid_generate_v4 (),
    target_row_id uuid NOT NULL,
    operation_type char(1) NOT NULL,
    operation_user_id varchar(32) NOT NULL DEFAULT current_user,
    operation_executed_at timestamp NOT NULL DEFAULT now(),
    data_after_executed_operation jsonb,
    CONSTRAINT "PK_h_action_taken_guid" PRIMARY KEY (h_action_taken_guid)
  );

COMMENT on table public.action_taken_h is 'History table for complaint table';

COMMENT on column public.action_taken_h.h_action_taken_guid is 'System generated unique key for complaint history. This key should never be exposed to users via any system utilizing the tables.';

COMMENT on column public.action_taken_h.target_row_id is 'The unique key for the complaint that has been created or modified.';

COMMENT on column public.action_taken_h.operation_type is 'The operation performed: I = Insert, U = Update, D = Delete';

COMMENT on column public.action_taken_h.operation_user_id is 'The id of the user that created or modified the data in the complaint table.  Defaults to the logged in user if not passed in by the application.';

COMMENT on column public.action_taken_h.operation_executed_at is 'The timestamp when the data in the complaint table was created or modified.  The timestamp is stored in UTC with no Offset.';

COMMENT on column public.action_taken_h.data_after_executed_operation is 'A JSON representation of the row in the table after the operation was completed successfully.   This implies that the latest row in the audit table will always match with the current row in the live table.';

-- 
-- Apply audit trail trigger to action_taken_h
-- 
CREATE
or REPLACE TRIGGER actntkn_history_trigger BEFORE INSERT
OR DELETE
OR
UPDATE ON action_taken FOR EACH ROW
EXECUTE PROCEDURE audit_history ('action_taken_h', 'action_taken_guid');

-- 
-- Add new webeoc_identifier column to complaint 
-- 
ALTER TABLE public.complaint
ADD webeoc_identifier VARCHAR(20) NULL;

COMMENT ON COLUMN public.complaint.webeoc_identifier IS 'Unique Identifier from the webEOC source system to identify a complaint update.   This is required as the natural key is not available in all webEOC APIs';

-- 
-- Add new webeoc_identifier column to complaint_update 
-- 
ALTER TABLE public.complaint_update
ADD webeoc_identifier VARCHAR(20) NULL;

COMMENT ON COLUMN public.complaint_update.webeoc_identifier IS 'Unique Identifier from the webEOC source system to identify a complaint update.   This is required as the natural key is not available in all webEOC APIs';